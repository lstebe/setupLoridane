[
    {
        "id": "20f0b4a8.24eafc",
        "type": "tab",
        "label": "LORIDANE",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b18c33b4.d2deb",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a4cddca9.8d353",
        "type": "tab",
        "label": "Serial",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e1d714ec.ccad48",
        "type": "tab",
        "label": "Database",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4d335ad3.5561e4",
        "type": "tab",
        "label": "Energiekennzahlen",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d7577d7f.0f9b4",
        "type": "subflow",
        "name": "LORIDANE - GUI last5msgs",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 140,
                "wires": [
                    {
                        "id": "cfe970e8.dec84"
                    },
                    {
                        "id": "600536c1.7e8cc8"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "c23de0ef.dae5f",
        "type": "subflow",
        "name": "LORIDANE - NodeSync",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "font-awesome/fa-clock-o",
        "status": {
            "x": 500,
            "y": 220,
            "wires": [
                {
                    "id": "111ba65b.68a45a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "922120e5.5b086",
        "type": "subflow",
        "name": "LORIDANE - GUI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 460,
                "wires": [
                    {
                        "id": "fa0f21a7.2fba9"
                    },
                    {
                        "id": "f2230676.6a28f8"
                    },
                    {
                        "id": "60d33b08.42a134"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1440,
                "y": 460,
                "wires": [
                    {
                        "id": "53654a49.b88fe4",
                        "port": 0
                    },
                    {
                        "id": "1733b022.f7d1a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_button.png"
    },
    {
        "id": "1395c386.064e8c",
        "type": "subflow",
        "name": "LORIDANE - Init",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "node-red/cog.svg",
        "status": {
            "x": 660,
            "y": 180,
            "wires": [
                {
                    "id": "dd36f402.134978",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ada10296.06249",
        "type": "subflow",
        "name": "LORIDANE - Send Timedisk",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 120,
                "wires": [
                    {
                        "id": "e4d7b82.7ce1f48"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "6dc379ee.b0e338",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_gauge.png",
        "status": {
            "x": 580,
            "y": 180,
            "wires": [
                {
                    "id": "3490e79c.716c88",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6712fbef.2d8494",
        "type": "subflow",
        "name": "LORIDANE - Acknowledge",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 80,
                "wires": [
                    {
                        "id": "1a746dcd.d51fd2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": [
                    {
                        "id": "1a746dcd.d51fd2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "font-awesome/fa-cloud-download",
        "status": {
            "x": 520,
            "y": 160,
            "wires": [
                {
                    "id": "1d0625f6.98bf6a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4e984df.de567b4",
        "type": "subflow",
        "name": "LORIDANE - MQTT In",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 820,
                "y": 80,
                "wires": [
                    {
                        "id": "e8e230ba.be0de",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1000,
                "y": 120,
                "wires": [
                    {
                        "id": "f023d975.deb8d8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1400,
                "y": 60,
                "wires": [
                    {
                        "id": "af3bda90.002258",
                        "port": 0
                    },
                    {
                        "id": "b3b76bf0.aef8c8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "outputLabels": [
            "raw data output",
            "processed Payload",
            "conditional output, acknowledgement and Class A Devices "
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 580,
            "y": 260,
            "wires": [
                {
                    "id": "f7a51ace.7907f8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2fad0fdc.1d24b",
        "type": "subflow",
        "name": "LORIDANE - Downlink",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 100,
                "wires": [
                    {
                        "id": "1a95a2d5.655b3d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "node-red/bridge-dash.svg",
        "status": {
            "x": 580,
            "y": 160,
            "wires": [
                {
                    "id": "1792be97.4020f1",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "364ae788.0e6328",
        "type": "subflow",
        "name": "LORIDANE - Save new devices",
        "info": "Accepts two Inputs:\n - MQTT in listening to lora/gateway#\n - Inject node or similar that sends a\n    msg.topic of \"syncfrequency\"\n    if the gateway should listen to the standard frequency of 867MHz for 10 seconds at SF7\n\nIt then will add a configuration-file\nto /home/pi/gateway/\nfor each new Node\n\nIt has 3 Outputs:\n\n 1) Contains every (processed) message the MQTT In      receives in msg.data.\n 2) Should be conected to\n    \"Load Configuration from Files\", if that is wanted\n 3) Received Raw MQTT on msg.payload\n    and the configuration Data if new device binding is initiated via msg.topic = \"syncfrequency\"",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 240,
                "wires": [
                    {
                        "id": "82c27a6c.0a2258"
                    },
                    {
                        "id": "77abdcc2.fad7c4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 220,
                "wires": [
                    {
                        "id": "aecffc67.3d552",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "GPL-3.0"
        },
        "color": "#3FADB5",
        "icon": "node-red/leveldb.png",
        "status": {
            "x": 420,
            "y": 380,
            "wires": [
                {
                    "id": "bd6188af.c82468",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2baadb05.c532f4",
        "type": "group",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "style": {
            "fill": "#ffff3f",
            "fill-opacity": "0.31",
            "label": true
        },
        "nodes": [
            "c3c07ea9.8a444",
            "2269f9a3.74bc46",
            "22e7e77c.e3a278",
            "8b8be6c.bb37118",
            "7f63c285.112a6c",
            "9f216e3.3ebfd9",
            "f7c8f902.ba6358",
            "6f40b123.85031",
            "a1c83a72.deb3d8",
            "d92e9da8.79e03",
            "40bc1de0.b21fe4",
            "42890313.99adec"
        ],
        "x": 214,
        "y": 699,
        "w": 772,
        "h": 422
    },
    {
        "id": "4936118b.229c4",
        "type": "group",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3FADB5",
            "fill-opacity": "0.26",
            "stroke": "#3FADB5"
        },
        "nodes": [
            "32bd7baa.d97b84",
            "f4bb67bd.d39b98",
            "8d9b21fb.c4275",
            "91387791.465208",
            "462cebc3.de6054",
            "8ed3f24e.7d554",
            "ae7a5c97.cc6aa",
            "96e88eff.65928",
            "84f194f0.98f118",
            "514c816a.24ad6",
            "48d31a4b.9b3544",
            "713d228e.dde67c",
            "dcee77a5.339a48",
            "c2a7d48a.8b7dc8",
            "ba03182a.053b38"
        ],
        "x": 34,
        "y": 259,
        "w": 1252,
        "h": 322
    },
    {
        "id": "3458ce4.31e1d32",
        "type": "ui_group",
        "name": "Messages",
        "tab": "278b2300.ae23ae",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "a7a965b0.4dbfd8",
        "type": "ui_group",
        "z": "922120e5.5b086",
        "name": "Delete Device",
        "tab": "1809f267.7a279e",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "1152859e.ef93ba",
        "type": "ui_group",
        "z": "922120e5.5b086",
        "name": "Ignore List",
        "tab": "1809f267.7a279e",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "f798079b.0c85e8",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "fe39cdd7.d53ea",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "905bed34.63eb3",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "b762c9b2.4a59b8",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "db209ff8.5830f",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "41a7925c.8a3c6c",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "a6441479.e064f8",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "5e652f73.af4fe",
        "type": "ui_spacer",
        "z": "922120e5.5b086",
        "name": "spacer",
        "group": "bf837bc6.2c47f8",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "d7396f84.84707",
        "type": "ui_group",
        "name": "Server",
        "tab": "1809f267.7a279e",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "a3b84e04.bcada",
        "type": "ui_group",
        "name": "Configure Single Node",
        "tab": "7f451d99.cdaae4",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "41b7f885.973478",
        "type": "ui_group",
        "name": "Configure Gateway",
        "tab": "6b5685b0.8ca3ec",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "5db15994.d9fc08",
        "type": "ui_group",
        "name": "Change Global Network Configuration",
        "tab": "842e81e.7f33f8",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "753624ea.23803c",
        "type": "ui_group",
        "name": "Delete Device",
        "tab": "1809f267.7a279e",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "14943851.2ea1c8",
        "type": "ui_group",
        "name": "Address Generator",
        "tab": "1809f267.7a279e",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "1809f267.7a279e",
        "type": "ui_tab",
        "name": "System",
        "icon": "fa-cog",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bf837bc6.2c47f8",
        "type": "ui_group",
        "name": "ONRO",
        "tab": "278b2300.ae23ae",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7f451d99.cdaae4",
        "type": "ui_tab",
        "name": "Configure Node",
        "icon": "fa-microchip",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6b5685b0.8ca3ec",
        "type": "ui_tab",
        "name": "Configure Gateway",
        "icon": "wifi",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "842e81e.7f33f8",
        "type": "ui_tab",
        "name": "Global Config",
        "icon": "fa-globe",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "278b2300.ae23ae",
        "type": "ui_tab",
        "name": "Messages",
        "icon": "comment",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "11c9f05.acda51",
        "type": "ui_group",
        "name": "Admit Node",
        "tab": "3dfe0b0a.ecf364",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "3dfe0b0a.ecf364",
        "type": "ui_tab",
        "name": "Admittance",
        "icon": "key",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3be33484.0e776c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.4.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "d726f7d4.e188a8",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "4960ed19c09e81e0",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#00ccb4",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#00ccb4",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#00ccb4",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1affe4",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#00ccb4",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Loridane GUI",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4073e498fd9f7db7",
        "type": "ui_group",
        "name": "Change Gateway Settings via USB",
        "tab": "1809f267.7a279e",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cfe970e8.dec84",
        "type": "function",
        "z": "d7577d7f.0f9b4",
        "name": "Read incoming messages",
        "func": "function getLocaleTime(dateobj){ //return corrected summer or wintertime\n    month = dateobj.getMonth();\n    hours = dateobj.getHours();\n    \n    //Between April an Septemer?\n    if (inRangeOf(month,3,8)){\n        dateobj.setHours(++hours);\n        return dateobj;\n    }\n    \n    daydate = dateobj.getDate();\n    day = dateobj.getDay();\n    if (month == 2){ //if in March\n        if (daydate >= 25 && 31 - day > 25){\n            dateobj.setHours(++hours);\n            return dateobj;\n        }\n    }\n    if (month == 9){ //if in October\n        if (daydate >= 25 && 31 - day > 25){\n            return dateobj;\n        }else{\n            dateobj.setHours(++hours);\n            return dateobj;\n        }\n    }\n    return dateobj;\n}\n\ninRangeOf = global.get(\"LORIDANE.funcs.inRangeOf\");\n\nif(msg.topic == \"clear\"){\n    lastmsgs = [\"\",\"\",\"\",\"\",\"\"];\n    context.set(\"lastmsgs\",lastmsgs);\n    msg = {payload: lastmsgs};\n    return msg;\n}\n\npay = msg.data.pay;\nnode = msg.data.node;\nrssi = msg.data.rssi;\nnow = getLocaleTime(new Date());\nlastmsgs = context.get(\"lastmsgs\")||[];\ninput = node+\" - \"+pay +\" - RSSI: \"+rssi +\" - \"+ now.toLocaleString('de-DE');\n\nlastmsgs.unshift(input);\nif (lastmsgs.length > 5) lastmsgs.pop();\ncontext.set(\"lastmsgs\",lastmsgs);\n\nmsg = {payload: lastmsgs};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "1d74e338.18182d",
                "afbef3a7.eda7",
                "2a6b272a.71f028",
                "a11f3649.f42108",
                "1f214329.8b0e6d"
            ]
        ]
    },
    {
        "id": "1d74e338.18182d",
        "type": "ui_text",
        "z": "d7577d7f.0f9b4",
        "group": "3458ce4.31e1d32",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Last Msgs",
        "label": "{{msg.payload[0]}}",
        "format": "",
        "layout": "col-center",
        "x": 490,
        "y": 80,
        "wires": []
    },
    {
        "id": "afbef3a7.eda7",
        "type": "ui_text",
        "z": "d7577d7f.0f9b4",
        "group": "3458ce4.31e1d32",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Last Msgs",
        "label": "{{msg.payload[1]}}",
        "format": "",
        "layout": "col-center",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "2a6b272a.71f028",
        "type": "ui_text",
        "z": "d7577d7f.0f9b4",
        "group": "3458ce4.31e1d32",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Last Msgs",
        "label": "{{msg.payload[2]}}",
        "format": "",
        "layout": "col-center",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "a11f3649.f42108",
        "type": "ui_text",
        "z": "d7577d7f.0f9b4",
        "group": "3458ce4.31e1d32",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Last Msgs",
        "label": "{{msg.payload[3]}}",
        "format": "",
        "layout": "col-center",
        "x": 590,
        "y": 200,
        "wires": []
    },
    {
        "id": "1f214329.8b0e6d",
        "type": "ui_text",
        "z": "d7577d7f.0f9b4",
        "group": "3458ce4.31e1d32",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Last Msgs",
        "label": "{{msg.payload[4]}}",
        "format": "",
        "layout": "col-center",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "d41ccc5b.708d4",
        "type": "ui_button",
        "z": "d7577d7f.0f9b4",
        "name": "",
        "group": "3458ce4.31e1d32",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear View",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-trash-o",
        "payload": "",
        "payloadType": "str",
        "topic": "clear",
        "topicType": "str",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "cfe970e8.dec84"
            ]
        ]
    },
    {
        "id": "600536c1.7e8cc8",
        "type": "function",
        "z": "d7577d7f.0f9b4",
        "name": "gui show confirmed",
        "func": "if(msg.data.pay == \"+\")return {topic:\"Confirmed by:\",payload:msg.data.node};\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 280,
        "wires": [
            [
                "fa6e0a11.0493b8"
            ]
        ]
    },
    {
        "id": "fa6e0a11.0493b8",
        "type": "ui_toast",
        "z": "d7577d7f.0f9b4",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "show GUI Confirmation",
        "x": 440,
        "y": 280,
        "wires": []
    },
    {
        "id": "47d49580.9cf8dc",
        "type": "function",
        "z": "c23de0ef.dae5f",
        "name": "Sync",
        "func": "//*\ntimer = context.get(\"timer\");\nclearTimeout(timer);\ncontext.set(\"timer\",timer);\n//*/\n\nfunction countup(secs){\n    timer = context.get(\"timer\");\n    clearTimeout(timer);\n    node.status({text:\"Last Sync: \"+secs+\"s ago\"});\n    secs++;\n    timer = setTimeout(countup,1000,secs);\n    context.set(\"timer\",timer);\n}\n\ngetUIDGW = global.get(\"LORIDANE.funcs.getUIDGW\");\ngws = getUIDGW();\n\nfor (var g in gws){\n    msg = {payload:\"cn:sync\",topic:\"lora/\"+gws[g]};\n    node.send(msg);\n}\nnode.status({text: \"Sync\"});\n//*\ntimer = setTimeout(countup,1000,0);\ncontext.set(\"timer\",timer);\n//*/\n//setTimeout(()=>node.status({}),5000);\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "44fa5e0e.309d9"
            ]
        ]
    },
    {
        "id": "44fa5e0e.309d9",
        "type": "subflow:2fad0fdc.1d24b",
        "z": "c23de0ef.dae5f",
        "name": "",
        "env": [],
        "x": 450,
        "y": 140,
        "wires": []
    },
    {
        "id": "a10c5144.a42b1",
        "type": "inject",
        "z": "c23de0ef.dae5f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "233",
        "crontab": "",
        "once": true,
        "onceDelay": "7",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "47d49580.9cf8dc"
            ]
        ]
    },
    {
        "id": "111ba65b.68a45a",
        "type": "status",
        "z": "c23de0ef.dae5f",
        "name": "",
        "scope": null,
        "x": 390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "34e37a28.b9b3f6",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "",
        "group": "d7396f84.84707",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot Server",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Are You Sure You Want the Server to Reboot now?",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "178cfec4.b5ec91"
            ]
        ]
    },
    {
        "id": "178cfec4.b5ec91",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 140,
        "wires": [
            [
                "1ef5287c.168528"
            ]
        ]
    },
    {
        "id": "1ef5287c.168528",
        "type": "switch",
        "z": "922120e5.5b086",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "62e26b8b.b40d54",
                "47bcec4b.214e74"
            ],
            [
                "b793604.f64eca"
            ]
        ]
    },
    {
        "id": "b793604.f64eca",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "Cancelled",
        "x": 890,
        "y": 180,
        "wires": []
    },
    {
        "id": "e41ef28e.13734",
        "type": "exec",
        "z": "922120e5.5b086",
        "command": "sudo reboot now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8503ba05.ad4498",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "Reboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 100,
        "wires": [
            [
                "e41ef28e.13734"
            ]
        ]
    },
    {
        "id": "ac986b9b.5d8f08",
        "type": "ui_dropdown",
        "z": "922120e5.5b086",
        "name": "Choose Node",
        "label": "",
        "tooltip": "",
        "place": "Select Node to be configured",
        "group": "a3b84e04.bcada",
        "order": 2,
        "width": 11,
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "nodes",
        "topicType": "str",
        "x": 540,
        "y": 900,
        "wires": [
            [
                "d643c272.92077",
                "1fbeb059.389d9"
            ]
        ]
    },
    {
        "id": "fa0f21a7.2fba9",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Load Devices",
        "func": "nodes = global.get(\"LORIDANE.devices.nodes\");\noptions = [];\n\n// as list for the choose device dropdown load the device an if available the friendlyname\nfor (var node in nodes){\n    let name = \"\";\n    if(nodes[node].friendlyname != \"\" && nodes[node].friendlyname != undefined){\n        name = `${nodes[node].uid} - ${nodes[node].friendlyname}`;\n        options[node] = {[name]:nodes[node].uid};\n    }else{\n        name = `${nodes[node].uid}`;\n        options[node] = {[name]:nodes[node].uid} ;\n    }\n}\nreturn {options:options};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 900,
        "wires": [
            [
                "ac986b9b.5d8f08"
            ]
        ]
    },
    {
        "id": "7b8ee05a.b7734",
        "type": "debug",
        "z": "922120e5.5b086",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 900,
        "wires": []
    },
    {
        "id": "94f9702b.5ce8a",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 860,
        "wires": [
            [
                "fa0f21a7.2fba9"
            ]
        ]
    },
    {
        "id": "d643c272.92077",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Join Configurations",
        "func": "nodes = msg.payload;\nif(msg.topic == \"nodes\"){\n    context.set(\"nodes\",nodes);\n    return;\n}\n\nif(msg.topic == \"data\"){\n    nodes = context.get(\"nodes\");\n    data = msg.payload;\n    data.freq /= 10;\n    data.sf /= 1; \n    data.tx /= 1;\n    data.iv *= 1000;\n}\nmsg.payload = {nodes:nodes,data:data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "a6dcf1a0.330c5"
            ]
        ]
    },
    {
        "id": "bf73f3fb.d34da",
        "type": "ui_form",
        "z": "922120e5.5b086",
        "name": "",
        "label": "Configure chosen Node(s)",
        "group": "a3b84e04.bcada",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Friendly Name (eg. Milling Center 1)",
                "value": "friendly",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Frequency (8672 for 867.2MHz)",
                "value": "freq",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Spreading Factor (7-12)",
                "value": "sf",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Sending Power (4 - 20)",
                "value": "tx",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Interval (more than 5s)",
                "value": "iv",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "friendly": "",
            "freq": "",
            "sf": "",
            "tx": "",
            "iv": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancel",
        "topic": "data",
        "topicType": "str",
        "splitLayout": "",
        "x": 470,
        "y": 960,
        "wires": [
            [
                "d643c272.92077"
            ]
        ]
    },
    {
        "id": "a6dcf1a0.330c5",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Validate Data",
        "func": "data = msg.payload.data;\nlet topic = true;\ninrange = global.get(\"LORIDANE.funcs.inRangeOf\");\n\n\nfunction allowed(freq){\n    allowedfreq = global.get(\"LORIDANE.values.allowedFreq\");\n    for (i = 0;i < allowedfreq.length -3;){\n        if (inrange(data.freq,allowedfreq[i],allowedfreq[i+1]) && (data.freq*10) % 2 === 0){\n            return true;\n        }\n        i += 3;\n    }\n    return false;\n}\n\nvalidated = false;\nkeys = Object.keys(data);\ncause = \"\";\n\nfor(var key of keys){\n    validated = false;\n    if(data[key]){\n        switch(key){\n            case \"freq\":\n                validated = allowed(data.freq);\n                cause = \"Frequency\";\n                break;\n            case \"tx\":\n                validated = inrange(data.tx,4,20);\n                cause = \"Sending Power\";\n                break;\n            case \"sf\":\n                validated = inrange(data.sf,7,12);\n                cause = \"Spreading Factor\";\n                break;\n            case \"friendly\":\n                validated = true;\n                break;\n            case \"iv\":\n                validated = inrange(data.iv,5000,Infinity);\n                cause = \"Send Interval\";\n                break;\n        }\n        if(!validated) break;\n    }else{\n        validated = true;\n        continue;\n    }\n}\n\nmsg.topic = validated;\nmsg.cause = cause;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 960,
        "wires": [
            [
                "7b8ee05a.b7734",
                "e2a7d40.bca1a3",
                "53654a49.b88fe4"
            ]
        ]
    },
    {
        "id": "3713a25e.4245de",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Not Valid",
        "x": 1160,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "e2a7d40.bca1a3",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Show Notification",
        "func": "if(msg.payload.nodes === undefined){\n    msg.payload = \"No Device Selected\";\n    msg.topic = \"Configuration not valid!\";\n    return msg;\n}\n\nif(msg.topic){\n    msg.payload = \"Valid Configuration. Executed\";\n    msg.topic = \"Done.\";\n}else{\n    msg.payload = \"Choose other Params for \"+msg.cause;\n    msg.topic = \"Configuration not valid!\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1020,
        "wires": [
            [
                "b348ca1d.2665f8"
            ]
        ]
    },
    {
        "id": "c72739fc.76ccc8",
        "type": "ui_dropdown",
        "z": "922120e5.5b086",
        "name": "Choose Gateway",
        "label": "",
        "tooltip": "",
        "place": "Select Gateway to be configured",
        "group": "41b7f885.973478",
        "order": 2,
        "width": "7",
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "nodes",
        "topicType": "str",
        "x": 550,
        "y": 1280,
        "wires": [
            [
                "eb1f6d8d.7bd5",
                "468f1d28.df4054"
            ]
        ]
    },
    {
        "id": "f2230676.6a28f8",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Load Devices",
        "func": "nodes = global.get(\"LORIDANE.devices.gw\");\noptions = [];\n\nfor (var node in nodes){\n    let name = \"\";\n    if(nodes[node].friendlyname != \"\" && nodes[node].friendlyname != undefined){\n        name = `${nodes[node].uid} - ${nodes[node].friendlyname}`;\n        options[node] = {[name]:nodes[node].uid};\n    }else{\n        name = `${nodes[node].uid}`;\n        options[node] = {[name]:nodes[node].uid} ;\n    }\n}\nreturn {options:options};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1280,
        "wires": [
            [
                "c72739fc.76ccc8"
            ]
        ]
    },
    {
        "id": "56eb94c8.88784c",
        "type": "debug",
        "z": "922120e5.5b086",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1280,
        "wires": []
    },
    {
        "id": "7b4795bf.a3635c",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1240,
        "wires": [
            [
                "f2230676.6a28f8"
            ]
        ]
    },
    {
        "id": "eb1f6d8d.7bd5",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Join Configurations",
        "func": "nodes = msg.payload;\nif(msg.topic == \"nodes\"){\n    context.set(\"nodes\",nodes);\n    return;\n}\n\nif(msg.topic == \"data\"){\n    nodes = context.get(\"nodes\");\n    data = msg.payload;\n    data.freq /= 10;\n    data.sf /= 1; \n    data.tx /= 1;\n}\nmsg.payload = {nodes:nodes,data:data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "59a2d840.f900a8"
            ]
        ]
    },
    {
        "id": "f98093c4.e9116",
        "type": "ui_form",
        "z": "922120e5.5b086",
        "name": "",
        "label": "Configure chosen Gateway(s)",
        "group": "41b7f885.973478",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Friendly Name (eg. Milling Center 1)",
                "value": "friendly",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Frequency (8672 for 867.2MHz)",
                "value": "freq",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Spreading Factor (7-12)",
                "value": "sf",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Sending Power (4 - 20)",
                "value": "tx",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "friendly": "",
            "freq": "",
            "sf": "",
            "tx": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancel",
        "topic": "data",
        "topicType": "str",
        "splitLayout": "",
        "x": 450,
        "y": 1360,
        "wires": [
            [
                "eb1f6d8d.7bd5"
            ]
        ]
    },
    {
        "id": "59a2d840.f900a8",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Validate Data",
        "func": "data = msg.payload.data;\nlet topic = true;\ninrange = global.get(\"LORIDANE.funcs.inRangeOf\");\n\n\nfunction allowed(freq){\n    allowedfreq = global.get(\"LORIDANE.values.allowedFreq\");\n    for (i = 0;i < allowedfreq.length -3;){\n        if (inrange(data.freq,allowedfreq[i],allowedfreq[i+1]) && (data.freq*10) % 2 === 0){\n            return true;\n        }\n        i += 3;\n    }\n    return false;\n}\n\nvalidated = false;\nkeys = Object.keys(data);\ncause = \"\";\n\nfor(var key of keys){\n    validated = false;\n    if(data[key]){\n        switch(key){\n            case \"freq\":\n                validated = allowed(data.freq);\n                cause = \"Frequency\";\n                break;\n            case \"tx\":\n                validated = inrange(data.tx,4,20);\n                cause = \"Sending Power\";\n                break;\n            case \"sf\":\n                validated = inrange(data.sf,7,12);\n                cause = \"Spreading Factor\";\n                break;\n            case \"friendly\":\n                validated = true;\n                break;\n        }\n        if(!validated) break;\n    }else{\n        validated = true;\n        continue;\n    }\n}\n\nmsg.topic = validated;\nmsg.cause = cause;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1320,
        "wires": [
            [
                "3a7408c4.bf13f8",
                "1733b022.f7d1a"
            ]
        ]
    },
    {
        "id": "22a3945.0e1b46c",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Not Valid",
        "x": 1160,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "3a7408c4.bf13f8",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Show Notification",
        "func": "if(msg.payload.nodes === undefined){\n    msg.payload = \"No Device Selected\";\n    msg.topic = \"Configuration not valid!\";\n    return msg;\n}\n\nif(msg.topic){\n    msg.payload = \"Valid Configuration. Executed\";\n    msg.topic = \"Done.\";\n}else{\n    msg.payload = \"Choose other Params for \"+msg.cause;\n    msg.topic = \"Configuration not valid!\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "b5a00295.9f04a"
            ]
        ]
    },
    {
        "id": "c95a63e2.3f422",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Load Devices",
        "func": "nodes = global.get(\"LORIDANE.devices.nodes\");\ngateways = global.get(\"LORIDANE.devices.gw\");\n\noptions = [];\n\nfor (var node in nodes){\n    options.push(nodes[node].uid);\n}\nfor (var gw in gateways){\n    options.push(gateways[gw].uid);\n}\ntopic = \"nodes\";\nreturn {topic: topic, options:options};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1640,
        "wires": [
            [
                "6146c722.a38c28"
            ]
        ]
    },
    {
        "id": "391eb595.282f6a",
        "type": "debug",
        "z": "922120e5.5b086",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1600,
        "wires": []
    },
    {
        "id": "6146c722.a38c28",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Join Configurations",
        "func": "nodes = msg.options;\nlet data;\n\nif(msg.topic == \"nodes\"){\n    context.set(\"nodes\",nodes);\n    return;\n}\n\nif(msg.topic == \"data\"){\n    nodes = context.get(\"nodes\");\n    data = msg.payload;\n    data.freq /= 10;\n    data.sf /= 1; \n    data.tx /= 1;\n    data.iv *= 1000;\n}\n\nmsg.payload = {nodes:nodes,data:data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1660,
        "wires": [
            [
                "215e0ff.224dbf"
            ]
        ]
    },
    {
        "id": "1c412889.16aae7",
        "type": "ui_form",
        "z": "922120e5.5b086",
        "name": "",
        "label": "Configure Devices",
        "group": "5db15994.d9fc08",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Frequency (8672 for 867.2MHz)",
                "value": "freq",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Spreading Factor (7-12)",
                "value": "sf",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Sending Power (4 - 20)",
                "value": "tx",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Sending Interval (more than 5sec)",
                "value": "iv",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "freq": "",
            "sf": "",
            "tx": "",
            "iv": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancel",
        "topic": "data",
        "topicType": "str",
        "splitLayout": "",
        "x": 210,
        "y": 1660,
        "wires": [
            [
                "c95a63e2.3f422",
                "1b40754c.f5998b"
            ]
        ]
    },
    {
        "id": "215e0ff.224dbf",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Validate Data",
        "func": "data = msg.payload.data;\nlet topic = true;\ninrange = global.get(\"LORIDANE.funcs.inRangeOf\");\n\n\nfunction allowed(freq){\n    allowedfreq = global.get(\"LORIDANE.values.allowedFreq\");\n    for (i = 0;i < allowedfreq.length -3;){\n        if (inrange(data.freq,allowedfreq[i],allowedfreq[i+1]) && (data.freq*10) % 2 === 0){\n            return true;\n        }\n        i += 3;\n    }\n    return false;\n}\n\nvalidated = false;\nkeys = Object.keys(data);\ncause = \"\";\n\nfor(var key of keys){\n    validated = false;\n    if(data[key]){\n        switch(key){\n            case \"freq\":\n                validated = allowed(data.freq);\n                cause = \"forbidden Frequency \"+data.freq+\"MHz\";\n                break;\n            case \"tx\":\n                validated = inrange(data.tx,4,20);\n                cause = \"Sending Power\";\n                break;\n            case \"sf\":\n                validated = inrange(data.sf,7,12);\n                cause = \"Spreading Factor\";\n                break;\n            case \"friendly\":\n                validated = true;\n                break;\n            case \"iv\":\n                validated = inrange(data.iv,5000,Infinity);\n                cause = \"Send Interval\";\n                break;\n        }\n        if(!validated) break;\n    }else{\n        validated = true;\n        continue;\n    }\n}\n\nmsg.topic = validated;\nmsg.cause = cause;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1680,
        "wires": [
            [
                "ff5a7863.d84e28",
                "13ae9bb0.19ccf4"
            ]
        ]
    },
    {
        "id": "cca42ba6.1535c8",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Not Valid",
        "x": 1160,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "ff5a7863.d84e28",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Show Notification",
        "func": "if(msg.topic){\n    msg.payload = \"Valid Configuration. Executed\";\n    msg.topic = \"Done.\";\n}else{\n    msg.payload = \"Choose other Params for \"+msg.cause;\n    msg.topic = \"Configuration not valid!\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1740,
        "wires": [
            [
                "f78e6e10.09523"
            ]
        ]
    },
    {
        "id": "13ae9bb0.19ccf4",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Send configuration to nodes",
        "func": "if(!msg.topic){\n    return;\n}\ndata = msg.payload.data;\nstream = \"cg:cn:\";\n\ngateways = [];\nnodes = msg.payload.nodes;\nfor(i=nodes.length-1;i>=0;i--){\n    if(nodes[i].startsWith(\"GW\")){\n        gateways.push(nodes[i]);\n    }else{\n        break;\n    }\n}\n\nkeys = Object.keys(data);\nfor(var key of keys){\n    if(data[key] === 0){\n        continue;\n    }\n    switch(key){\n        case \"freq\":\n            freq = data.freq;\n            freq*=10;\n            stream += \"fn:\"+freq+\";fg:\"+freq+\";\";\n            break;\n        case \"tx\":\n            stream += \"tn:\"+data.tx+\";\";\n            break;\n        case \"iv\":\n            stream += \"iv:\"+data.iv+\";\";\n            break;\n        case \"sf\":\n            stream += \"sn:\"+data.sf+\";sg:\"+data.sf+\";\";\n    }\n}\n\nfor (var gw of gateways){\n    topic = \"lora/\"+gw;\n    node.send({payload:stream,topic:topic});\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1680,
        "wires": [
            [
                "60d33b08.42a134",
                "9e3d1b59.23c838",
                "391eb595.282f6a",
                "db7480dc.a712b"
            ]
        ]
    },
    {
        "id": "4ec1c59.3c72e3c",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "5db15994.d9fc08",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Note:",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 390,
        "y": 1600,
        "wires": []
    },
    {
        "id": "3e988854.756f78",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "If you don't wish to change a particular value, leave empty.",
        "payloadType": "str",
        "x": 250,
        "y": 1600,
        "wires": [
            [
                "4ec1c59.3c72e3c",
                "60d33b08.42a134"
            ]
        ]
    },
    {
        "id": "2298bc32.b5d154",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "41b7f885.973478",
        "order": 3,
        "width": "8",
        "height": 2,
        "name": "",
        "label": "Note:",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 550,
        "y": 1240,
        "wires": []
    },
    {
        "id": "352c4653.23cc2a",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "If you don't wish to change a particular value, leave empty. Please make sure you configure the Nodes first, otherwise they will loose connection!",
        "payloadType": "str",
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "2298bc32.b5d154"
            ]
        ]
    },
    {
        "id": "a503dd65.c955c",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "a3b84e04.bcada",
        "order": 3,
        "width": 12,
        "height": 2,
        "name": "",
        "label": "Note:",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 510,
        "y": 860,
        "wires": []
    },
    {
        "id": "85e5fa2c.0e6c48",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "If you don't wish to change a particular value, leave empty. Please make sure you configure a Node to parameters you will have a Gateway running on!",
        "payloadType": "str",
        "x": 370,
        "y": 860,
        "wires": [
            [
                "a503dd65.c955c"
            ]
        ]
    },
    {
        "id": "66e70a8c.9b9414",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "5db15994.d9fc08",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current Settings",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 780,
        "y": 1780,
        "wires": []
    },
    {
        "id": "60d33b08.42a134",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "show current settings",
        "func": "settings = global.get(\"LORIDANE.devices.gw[0]\");\nfreq = settings.freq / 1e6;\nsf = settings.sf;\nmsg.payload = \"Frequency: \"+freq+\" MHz , SF: \"+sf;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1780,
        "wires": [
            [
                "66e70a8c.9b9414"
            ]
        ]
    },
    {
        "id": "1733b022.f7d1a",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Send configuration to nodes",
        "func": "if(!msg.topic){\n    return;\n}\ndata = msg.payload.data;\nstream = \"cg:\";\n\ngateways = [];\nnodes = msg.payload.nodes;\nfor(i=nodes.length-1;i>=0;i--){\n    if(nodes[i].startsWith(\"GW\")){\n        gateways.push(nodes[i]);\n    }else{\n        break;\n    }\n}\n\nkeys = Object.keys(data);\nfor(var key of keys){\n    if(data[key] === 0){\n        continue;\n    }\n    switch(key){\n        case \"freq\":\n            freq = data.freq;\n            freq*=10;\n            stream += \"fg:\"+freq+\";\";\n            break;\n        case \"tx\":\n            stream += \"tg:\"+data.tx+\";\";\n            break;\n        case \"sf\":\n            stream += \"sg:\"+data.sf+\";\";\n    }\n}\n\nfor (var gw of gateways){\n    topic = \"lora/\"+gw;\n    if (stream != \"cg:\"){\n    node.send({payload:stream,topic:topic});\n    }\n}\n\nif (data.friendly != \"\"){\n    node.send({friendlyname:{name:data.friendly,uid:nodes[0]}});\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1320,
        "wires": [
            [
                "9e3d1b59.23c838",
                "db7480dc.a712b"
            ]
        ]
    },
    {
        "id": "53654a49.b88fe4",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Send configuration to nodes",
        "func": "if(!msg.topic){\n    return;\n}\ndata = msg.payload.data;\nstream = \"\";\n\ngateways = [];\nnodes = msg.payload.nodes;\nnodesHDD = global.get(\"LORIDANE.devices.nodes\");\n\nfor(i=0;i <= nodes.length-1;i++){\n    for(j=0;i <= nodesHDD.length-1;j++)\n    if(nodes[i]==nodesHDD[j].uid){\n        gateways.push(nodesHDD[j].nextGW);\n        break;\n    }\n}\n\nkeys = Object.keys(data);\nfor(var key of keys){\n    if(data[key] === 0){\n        continue;\n    }\n    switch(key){\n        case \"freq\":\n            freq = data.freq;\n            freq*=10;\n            stream += \"fn:\"+freq+\";\";\n            break;\n        case \"tx\":\n            stream += \"tn:\"+data.tx+\";\";\n            break;\n        case \"sf\":\n            stream += \"sn:\"+data.sf+\";\";\n            break;\n        case \"iv\":\n            stream += \"iv:\"+data.iv+\";\"\n    }\n}\n\nfor (var gw of gateways){\n    topic = \"lora/\"+gw;\n    \n    for(var nd in nodes){\n        if(stream != \"cn:\"){\n        node.send({payload:nodes[nd]+stream,topic:topic});\n        }\n    }\n    \n}\n\nif (data.friendly != \"\"){\n    node.send({friendlyname:{name:data.friendly,uid:nodes[0]}});\n}\n\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 960,
        "wires": [
            [
                "9e3d1b59.23c838",
                "db7480dc.a712b"
            ]
        ]
    },
    {
        "id": "45f7dc03.fc10c4",
        "type": "subflow:2fad0fdc.1d24b",
        "z": "922120e5.5b086",
        "name": "",
        "x": 1520,
        "y": 860,
        "wires": []
    },
    {
        "id": "9e3d1b59.23c838",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "neglect msg friendlyname",
        "func": "if(msg.friendlyname !== undefined){\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 820,
        "wires": [
            [
                "45f7dc03.fc10c4",
                "2581615a.b8042e"
            ]
        ]
    },
    {
        "id": "ab4e4547.8c5b08",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "reload gateways",
        "group": "41b7f885.973478",
        "order": 1,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "sync",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 260,
        "y": 1180,
        "wires": [
            [
                "f2230676.6a28f8"
            ]
        ]
    },
    {
        "id": "54c024d3.7922fc",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "reload nodes",
        "group": "a3b84e04.bcada",
        "order": 1,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "sync",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 224,
        "y": 813,
        "wires": [
            [
                "fa0f21a7.2fba9"
            ]
        ]
    },
    {
        "id": "f78e6e10.09523",
        "type": "switch",
        "z": "922120e5.5b086",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Done.",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Configuration not valid!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1740,
        "wires": [
            [
                "8844158.8c2fce8"
            ],
            [
                "cca42ba6.1535c8"
            ]
        ]
    },
    {
        "id": "8844158.8c2fce8",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Valid",
        "x": 1170,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b5a00295.9f04a",
        "type": "switch",
        "z": "922120e5.5b086",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Done.",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Configuration not valid!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 1380,
        "wires": [
            [
                "f2b963e8.b0971"
            ],
            [
                "22a3945.0e1b46c"
            ]
        ]
    },
    {
        "id": "b348ca1d.2665f8",
        "type": "switch",
        "z": "922120e5.5b086",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Done.",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Configuration not valid!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1020,
        "wires": [
            [
                "49071612.a43728"
            ],
            [
                "3713a25e.4245de"
            ]
        ]
    },
    {
        "id": "f2b963e8.b0971",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Valid",
        "x": 1170,
        "y": 1360,
        "wires": []
    },
    {
        "id": "49071612.a43728",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Valid",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "468f1d28.df4054",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "show current settings",
        "func": "gws = msg.payload;\nsettings = global.get(\"LORIDANE.devices.gw\");\nlet freq;\nlet friendly;\nlet sf;\nlet arr = [];\n\n\nfor (var gw in gws){\n    for(var s in settings){\n        if(gws[gw] == settings[s].uid){\n            (settings[s].friendlyname === undefined || settings[s].friendlyname == \"\") ? friendly = settings[s].uid : friendly = settings[s].friendlyname;\n            freq = settings[s].freq / 1e6;\n            sf = settings[s].sf;\n            arr.push(\"GW: \"+friendly+\" , Frequency: \"+freq+\" MHz , SF: \"+sf);\n        }\n    }\n}\n\nfreq = settings.freq / 1e6;\nsf = settings.sf;\nmsg.payload = arr.join(\"; \");\n\nif(msg.payload.length > 0){\n    msg.title = \"Current Settings\";\n}else{\n    msg.title = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1420,
        "wires": [
            [
                "81db2db4.c0215"
            ]
        ]
    },
    {
        "id": "81db2db4.c0215",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "41b7f885.973478",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Current GW Settings",
        "label": "{{msg.title}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 620,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ee9ebb95.cbbc28",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "5db15994.d9fc08",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Current Global Settings",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1530,
        "y": 720,
        "wires": []
    },
    {
        "id": "2581615a.b8042e",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "",
        "func": "setTimeout(()=>node.send({topic:\"\",payload:\"\"}),15000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 760,
        "wires": [
            [
                "ee9ebb95.cbbc28",
                "fdb2ae6d.5c6f9",
                "59421bc.49712e4"
            ]
        ]
    },
    {
        "id": "fdb2ae6d.5c6f9",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "a3b84e04.bcada",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Current Node Settings",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1520,
        "y": 680,
        "wires": []
    },
    {
        "id": "59421bc.49712e4",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "41b7f885.973478",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Current GW Settings",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1520,
        "y": 640,
        "wires": []
    },
    {
        "id": "1fbeb059.389d9",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "show current settings",
        "func": "gws = msg.payload;\nsettings = global.get(\"LORIDANE.devices.nodes\");\nlet freq;\nlet friendly;\nlet sf;\nlet arr = [];\n\n\nfor (var gw in gws){\n    for(var s in settings){\n        if(gws[gw] == settings[s].uid){\n            (settings[s].friendlyname === undefined || settings[s].friendlyname == \"\") ? friendly = settings[s].uid : friendly = settings[s].friendlyname;\n            freq = settings[s].freq / 1e6;\n            sf = settings[s].sf;\n            arr.push(\"Node: \"+friendly+\" , Frequency: \"+freq+\" MHz , SF: \"+sf);\n        }\n    }\n}\n\nfreq = settings.freq / 1e6;\nsf = settings.sf;\nmsg.payload = arr.join(\"; \");\n\nif(msg.payload.length > 0){\n    msg.title = \"Current Settings\";\n}else{\n    msg.title = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 800,
        "wires": [
            [
                "4f0740b.eec94c"
            ]
        ]
    },
    {
        "id": "4f0740b.eec94c",
        "type": "ui_text",
        "z": "922120e5.5b086",
        "group": "a3b84e04.bcada",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Current Node Settings",
        "label": "{{msg.title}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 560,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e07d7f1f.6ba2e",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Load Devices",
        "func": "let nodes = global.get(\"LORIDANE.devices.nodes\");\nlet gws = global.get(\"LORIDANE.devices.gw\");\nlet options = [];\n\n// as list for the choose device dropdown load the device an if available the friendlyname\nfor (var node in nodes){\n    let name = \"\";\n    if(nodes[node].friendlyname != \"\" && nodes[node].friendlyname != undefined){\n        name = `${nodes[node].uid} - ${nodes[node].friendlyname}`;\n        options[node] = {[name]:nodes[node].uid};\n    }else{\n        name = `${nodes[node].uid}`;\n        options[node] = {[name]:nodes[node].uid} ;\n    }\n}\nfor (var gw in gws){\n    let name = \"\";\n    if(gws[gw].friendlyname != \"\" && gws[gw].friendlyname != undefined){\n        name = `${gws[gw].uid} - ${gws[gw].friendlyname}`;\n        options.push({[name]:gws[gw].uid});\n    }else{\n        name = `${gws[gw].uid}`;\n        options.push({[name]:gws[gw].uid}) ;\n    }\n}\n\nreturn {options:options};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "50226140.c74eb"
            ]
        ]
    },
    {
        "id": "50226140.c74eb",
        "type": "ui_dropdown",
        "z": "922120e5.5b086",
        "name": "Choose Node",
        "label": "",
        "tooltip": "",
        "place": "Select Device to be deleted",
        "group": "753624ea.23803c",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "nodes",
        "topicType": "str",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "b0281ebc.4de1c"
            ]
        ]
    },
    {
        "id": "5471fbc9.090954",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "reload nodes",
        "group": "753624ea.23803c",
        "order": 1,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "sync",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "e07d7f1f.6ba2e"
            ]
        ]
    },
    {
        "id": "e29d8fcd.b9916",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "Are You Sure You want to delete this device including the configuration?",
        "name": "",
        "x": 730,
        "y": 460,
        "wires": [
            [
                "6bdca1f.8f1186"
            ]
        ]
    },
    {
        "id": "6bdca1f.8f1186",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "delete devices",
        "func": "if(msg.payload != \"OK\")return;\n\n//else\ndeleteDevice = global.get(\"LORIDANE.funcs.deleteDevice\");\nwriteConfig = global.get(\"LORIDANE.funcs.writeConfig\");\n\ndevices = msg.devices;\n\nfor(var device of devices){\n    deleteDevice(device);\n}\n\nwriteConfig();\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "66bb5fa0.f6e56"
            ]
        ]
    },
    {
        "id": "b0281ebc.4de1c",
        "type": "change",
        "z": "922120e5.5b086",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "devices",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 420,
        "wires": [
            [
                "e29d8fcd.b9916"
            ]
        ]
    },
    {
        "id": "66bb5fa0.f6e56",
        "type": "debug",
        "z": "922120e5.5b086",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 500,
        "wires": []
    },
    {
        "id": "1b40754c.f5998b",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "throttle",
        "func": "setTimeout((msg)=>node.send(msg),200,msg);\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1680,
        "wires": [
            [
                "6146c722.a38c28"
            ]
        ]
    },
    {
        "id": "b0c2d3e.15b773",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "",
        "group": "14943851.2ea1c8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate MAC",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 260,
        "y": 1880,
        "wires": [
            [
                "f8f1978f.438928"
            ]
        ]
    },
    {
        "id": "f8f1978f.438928",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "generate and show mac",
        "func": "const cr = global.get(\"crypto\")\nvar token = cr.randomBytes(6).toString('hex').toUpperCase();\nmsg.topic = \"This is a new random MAC address token. Prefix 'GW' or 'NO' to generate a new Device ID.\"\nmsg.payload = token;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1880,
        "wires": [
            [
                "23f1460b.a13e2a"
            ]
        ]
    },
    {
        "id": "23f1460b.a13e2a",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK I saved it",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 690,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "ff91fe98.c403c",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "d": true,
        "name": "",
        "group": "14943851.2ea1c8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete all Tokens",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 1940,
        "wires": [
            [
                "f624fc7e.eebc2"
            ]
        ]
    },
    {
        "id": "be40033d.bc523",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Yes, sure",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 470,
        "y": 1940,
        "wires": [
            [
                "8e968c3c.eb59d"
            ]
        ]
    },
    {
        "id": "8e968c3c.eb59d",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "delete tokens",
        "func": "if(msg.payload == \"Yes, sure\"){\n    global.set(\"LORIDANE.API.token\",[]);\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "f624fc7e.eebc2",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "",
        "func": "msg.payload = \"If yes, you will have to generate new ones and change them on every application\";\nmsg.topic = \"Delete all known Tokens?\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 1940,
        "wires": [
            [
                "be40033d.bc523"
            ]
        ],
        "l": false
    },
    {
        "id": "eb3840c4.215ad",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "",
        "group": "d7396f84.84707",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Shutdown Server",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Are You Sure You Want the Server to SHUTDOWN now?",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "196ee81.fc56d18"
            ]
        ]
    },
    {
        "id": "196ee81.fc56d18",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "42107d52.3b3c04"
            ]
        ]
    },
    {
        "id": "42107d52.3b3c04",
        "type": "switch",
        "z": "922120e5.5b086",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "62e26b8b.b40d54",
                "5903f31a.a995ac"
            ],
            [
                "8ed0ed9b.1dee4"
            ]
        ]
    },
    {
        "id": "8ed0ed9b.1dee4",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "Cancelled",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "bf8e70e6.dd7e6",
        "type": "exec",
        "z": "922120e5.5b086",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1020,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a85c6d32.5d752",
        "type": "inject",
        "z": "922120e5.5b086",
        "name": "Shutdown",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "bf8e70e6.dd7e6"
            ]
        ]
    },
    {
        "id": "45074ec9.4b7d8",
        "type": "ui_button",
        "z": "922120e5.5b086",
        "name": "reload nodes",
        "group": "1152859e.ef93ba",
        "order": 1,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "sync",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "22ce213d.bd49be"
            ]
        ]
    },
    {
        "id": "22ce213d.bd49be",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "Load Devices",
        "func": "options = global.get(\"LORIDANE.ignorelist\") || [];\n\nreturn {options:options};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 520,
        "wires": [
            [
                "b93357be.3ae3e8"
            ]
        ]
    },
    {
        "id": "b93357be.3ae3e8",
        "type": "ui_dropdown",
        "z": "922120e5.5b086",
        "name": "Choose Node",
        "label": "",
        "tooltip": "",
        "place": "Select Device to move to the admission list",
        "group": "1152859e.ef93ba",
        "order": 2,
        "width": "7",
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "nodes",
        "topicType": "str",
        "x": 500,
        "y": 520,
        "wires": [
            [
                "592f4586.4bce5c"
            ]
        ]
    },
    {
        "id": "592f4586.4bce5c",
        "type": "change",
        "z": "922120e5.5b086",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "devices",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 520,
        "wires": [
            [
                "15ea37ec.d6c158"
            ]
        ]
    },
    {
        "id": "15ea37ec.d6c158",
        "type": "ui_toast",
        "z": "922120e5.5b086",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "Are You Sure You want to move this device to the admission list?",
        "name": "",
        "x": 730,
        "y": 560,
        "wires": [
            [
                "8a7fbb8d.eb5f48"
            ]
        ]
    },
    {
        "id": "8a7fbb8d.eb5f48",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "move device from ignore to admit",
        "func": "if(msg.payload != \"OK\" || msg.devices == [])return;\n\n//else\nconst writeConfig = global.get(\"LORIDANE.funcs.writeConfig\");\nlet admit = global.get(\"LORIDANE.admit\")\nlet devices = msg.devices;\n\nfor(var device of devices){\n    admit.push(device);\n}\nglobal.set(\"LORIDANE.admit\",admit);\n\nwriteConfig();\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 560,
        "wires": [
            [
                "1b4f6d0a.9a0d93"
            ]
        ]
    },
    {
        "id": "1b4f6d0a.9a0d93",
        "type": "debug",
        "z": "922120e5.5b086",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 640,
        "wires": []
    },
    {
        "id": "62e26b8b.b40d54",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "write config",
        "func": "writeConfig = global.get(\"LORIDANE.funcs.writeConfig\");\nwriteConfig(0 /**delay in ms*/);\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "47bcec4b.214e74",
        "type": "delay",
        "z": "922120e5.5b086",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 835,
        "y": 140,
        "wires": [
            [
                "e41ef28e.13734"
            ]
        ],
        "l": false
    },
    {
        "id": "5903f31a.a995ac",
        "type": "delay",
        "z": "922120e5.5b086",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 835,
        "y": 240,
        "wires": [
            [
                "bf8e70e6.dd7e6"
            ]
        ],
        "l": false
    },
    {
        "id": "db7480dc.a712b",
        "type": "function",
        "z": "922120e5.5b086",
        "name": "write config",
        "func": "WC = global.get(\"LORIDANE.funcs.writeConfig\");\nWC(100)\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1480,
        "wires": []
    },
    {
        "id": "dd36f402.134978",
        "type": "status",
        "z": "1395c386.064e8c",
        "name": "",
        "scope": null,
        "x": 540,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ad0a1802.1bc0f8",
        "type": "inject",
        "z": "1395c386.064e8c",
        "name": "Load Device Configs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "74934f3780837a8f"
            ]
        ]
    },
    {
        "id": "a0be56ff.ac9d48",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "",
        "func": "const USER = msg.user;\nmsg.payload = `/home/${USER}/LORIDANE/config/`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 80,
        "wires": [
            [
                "dbefc9ac.db1378"
            ]
        ],
        "l": false
    },
    {
        "id": "dbefc9ac.db1378",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "Watch Config Folder",
        "func": "//Import filesystem Lib\nconst fs = global.get(\"fs\");\nconst homepath = msg.payload;\nlet LORIDANE = {};\nlet memCache = {};\nLORIDANE.LinuxUsername = msg.user;\nnode.status({text:\"Reading Config File and load to Memcache\"})\n\n//Look for the config file\nlet path = homepath+\"loridaneConfig.json\";\nlet config = JSON.parse(fs.readFileSync(path)); //load config\ndelete config._comment;\nLORIDANE.settings = config;\n\n//change path to the path of the memcache file\npath = LORIDANE.settings.path.config+\"memCacheLoridane.json\";\n\nif(fs.existsSync(path)) memCache = JSON.parse(fs.readFileSync(path));\n\n//check if memCache exists and concat objects\nif(memCache) LORIDANE = {...LORIDANE,...memCache};\nLORIDANE.blockONstart = false;\n\n// save to memcache    \nglobal.set(\"LORIDANE\",LORIDANE);\nsetTimeout(()=>node.status({text:\"Initialized\"}),3000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 80,
        "wires": [
            [
                "793fd.aa091c034",
                "15da05df.3dbc1a",
                "a361ed6d.d5815",
                "d435f79f.f30138"
            ]
        ]
    },
    {
        "id": "4a6c500.ea259b",
        "type": "exec",
        "z": "1395c386.064e8c",
        "command": "cat /etc/passwd | grep home",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "faf4204b.7f915"
            ],
            [],
            []
        ]
    },
    {
        "id": "faf4204b.7f915",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "Extract Username",
        "func": "data = msg.payload;\n\n// grep the name of the /home directory from <cat /etc/passwd | grep home>\nstartindex = data.indexOf(\"/home/\") + 6;\nuser = data.substring(startindex,data.indexOf(\":\",startindex));\nglobal.set([\"LORIDANE.LinuxUsername\",\"LORIDANE.blockONstart\"],[user,true]);\nnode.status({text:\"Linux Username: \"+user});\nmsg.user = user;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "793fd.aa091c034",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "Classes",
        "func": "classes = {\n    newConfig:\n        class newConfig{ // class initiator for device configs\n            constructor(UID,type,freq,sf,friendlyname,interval,nextgw){\n                this.uid = UID;\n                this.type = type;\n                this.freq = freq;\n                this.sf = sf;\n                this.friendlyname = friendlyname;\n                this.interval = interval;\n                this.nextGW = nextgw;\n            }\n        },\n\n};\nglobal.set(\"LORIDANE.classes\",classes);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 80,
        "wires": []
    },
    {
        "id": "15da05df.3dbc1a",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "Functions",
        "func": "funcs = {\n    checkUID: //**validate the device ID*/\n        function checkUID(UID){ //#bool\n            if(UID.length !== 14){\n                return false;\n            }\n            \n            if(!UID.startsWith(\"NO\")&& !UID.startsWith(\"GW\")){\n                return false;\n            }\n            for (index=2;index<UID.length;index++){\n                fit = new RegExp(/([A-F0-9])/).test(UID[index]);\n                if(!fit){\n                return fit;\n                }\n            }\n            return fit;\n        },\n    inRangeOf: //**check if num value is in a range*/\n        function inRangeOf(value,lower,upper){ //#bool\n            if (value >= lower && value <= upper){\n                return true;\n            }\n            return false;\n        },\n    getUIDGW: //**get all Gateway UIDs*/\n        function getUIDGW(){ //#array of strings\n            devices = global.get(\"LORIDANE.devices.gw\");\n            let arr = [];\n            for (var d in devices){\n                arr.push(devices[d].uid);\n            }\n            return arr;\n        },\n    getUIDND: //**get all Node UIDs*/\n        function getUIDND(){ //#array of strings\n            devices = global.get(\"LORIDANE.devices.nodes\");\n            let arr = [];\n            for (var d in devices){\n                arr.push(devices[d].uid);\n            }\n            return arr;\n        },\n    findGW://**find the index of a particular Gateway*/\n        function findGW(UID){ //#integer\n            const devices = global.get(\"LORIDANE.devices.gw\");\n            let i;\n            if(UID.startsWith(\"GW\")){\n                for(i in devices){\n                    if(devices[i].uid == UID)return i;\n                }\n            }\n            return -1;\n        },\n    findNode://**find the index of a particular Node*/\n        function findNode(UID){ //#integer\n            const devices = global.get(\"LORIDANE.devices.nodes\");\n            let i;\n            if(UID.startsWith(\"NO\")){\n                for(i in devices){\n                    if(devices[i].uid == UID)return i;\n                }\n            }\n            return -1;\n        },\n    deleteDevice: //**delete a particular device from memcache*/\n        function deleteDevice(UID){ //#none\n            var devices = global.get(\"LORIDANE.devices\");\n            var nodes = devices.nodes;\n            var gws = devices.gw;\n            let index;\n            index = funcs.findGW(UID);\n            if(index >= 0){\n                gws.splice(index,1);\n                global.set(\"LORIDANE.devices.gw\",gws);\n            }\n            index = funcs.findNode(UID);\n            if(index >= 0){\n                nodes.splice(index,1);\n                global.set(\"LORIDANE.devices.nodes\",nodes);\n            }\n            return;\n        },\n        writeConfig://*write the memcache to the memcache file**/\n            function writeConfig(delaytime){ // milliseconds #bool\n            let executed = true;\n                function writeDelayed(){\n                    const fs = global.get(\"fs\");\n                    var loridane =  global.get(\"LORIDANE\");\n                    const configpath = loridane.settings.path.config;\n                    delete loridane.homepath;\n                    const loridaneString = JSON.stringify(loridane,null,2);\n                    fs.writeFileSync(configpath+\"memCacheLoridane.json\",loridaneString)\n                    return true;\n                }\n                if(delaytime === 0 || delaytime === undefined){\n                    executed = writeDelayed();\n                }else{\n                    setTimeout(writeDelayed,delaytime);\n                }\n            return executed;\n        },\n        getConfig: //**get the whole configuration object by uid*/\n            function getConfig(uid){ //#object\n                let devices;\n                let device;\n                indexgw = funcs.findGW(uid);\n                indexno = funcs.findNode(uid);\n                \n                if(indexgw != -1){\n                    devices = global.get(\"LORIDANE.devices.gw\")\n                    device = devices[indexgw]\n                }else if(indexno != -1){\n                    devices = global.get(\"LORIDANE.devices.nodes\")\n                    device = devices[indexno]\n                }\n                return device;\n            },\n            math:{//**matematical functions*/\n                getMean://**mean of an array*/\n                    function getMean(arr){ //#double\n                        mean = arr.reduce((a,b) => a+b)/arr.length;\n                        return mean;\n                    },\n                getSmooth://**running mean of an array by smooting interval*/\n                    function getSmooth(arr,interval){ //#array\n                        smoothened = [];\n                        getMean = funcs.math.getMean;\n                        const arrcpy = arr;\n                        intHalf = Math.floor(interval/2);\n                        for(i=0;i<intHalf;i++){\n                            smoothened.push(arr[i]);\n                        }\n                        for(i = intHalf; i < arr.length - intHalf; i++){\n                            smoothened.push(getMean(arrcpy.slice(i-intHalf,i+interval)));\n                        }\n                        for(i=arr.length - intHalf;i<arr.length;i++){\n                            smoothened.push(arr[i]);\n                        }\n                        return smoothened;\n                    },\n                getCDS://**array with the numeric first or second derivative*/\n                    function getCDS(arr,order){ // # array\n                        let CDS = [0];\n                        const len = arr.length;\n                        switch(order){\n                            case 1:\n                                for(i=1;i<len-1;i++){\n                                    CDS.push((arr[i+1]-arr[i-1])/2);\n                                }\n                                break;\n                            case 2:\n                                for(i=1;i<len-1;i++){\n                                    CDS.push((arr[i+1] -2*arr[i]+arr[i-1]));\n                                }\n                                break;\n                        }\n                        CDS.push(0);\n                        return CDS;\n                    }\n                }\n};\nglobal.set(\"LORIDANE.funcs\",funcs);\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 140,
        "wires": []
    },
    {
        "id": "a361ed6d.d5815",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "Values",
        "func": "values = {\n    allowedFreq:\n        [863,864.875,0.1,865,868.475,1,868.7,869.025,0.1,869.4,869.525,0.1,869.7,869.875,1],\n        //[band1 lower, band1 upper, band1 duty cicle in %]\n};\n\nglobal.set(\"LORIDANE.values\",values);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "d435f79f.f30138",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "set blockonstart false",
        "func": "setTimeout(()=>global.set(\"LORIDANE.blockONstart\",false),5000)\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e4d7b82.7ce1f48",
        "type": "function",
        "z": "ada10296.06249",
        "name": "Wait 5s",
        "func": "lastmsg = context.get(\"lastmsg\")||Date.now();\nnow = Date.now();\ncontext.set(\"lastmsg\",now);\ntimer = context.get(\"timer\");\nclearTimeout(timer);\ncontext.set(\"timer\",timer);\n\nfunction send(msg){\n    node.send(msg);\n}\n\nif(msg.topic == \"subito\"){\n    send(msg);\n}else{\n    timer = setTimeout(send,5000,msg);\n    context.set(\"timer\",timer);\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "94811c76.73936"
            ]
        ]
    },
    {
        "id": "94811c76.73936",
        "type": "function",
        "z": "ada10296.06249",
        "name": "LORIDANE - TIMEDISK",
        "func": "const devices = global.get(\"LORIDANE.devices\");\nvar devicecount = devices.gw.length + devices.nodes.length;\nsf = devices.gw[0].sf;\n\n//timedisksize = Math.ceil((50 * 8 * Math.pow(2, sf))/(sf * 100000) * devicecount * 1000);\n\ntimedisksize = Math.ceil(((8 + ((400 - 4*sf + 28)/(4*sf)*5)) * Math.pow(2,sf)/(1e5)*1000)*devicecount);\n\nmsg.payload = {size:timedisksize,devicecount:devicecount};\nglobal.set([\"LORIDANE.timedisk.size\",\"LORIDANE.timedisk.count\"],[timedisksize,devicecount]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "6dc379ee.b0e338"
            ]
        ]
    },
    {
        "id": "6dc379ee.b0e338",
        "type": "function",
        "z": "ada10296.06249",
        "name": "send new Timedisk",
        "func": "nodes = global.get(\"LORIDANE.devices.nodes\");\ngws = global.get(\"LORIDANE.devices.gw\");\nlastnodes = context.get(\"lastnodes\")||[];\ncontext.set(\"lastnodes\",nodes);\ntdsize = msg.payload.size;\nlet newtd = false;\nsubito = (msg.topic == \"subito\");\n//node.warn(subito) //debugging\ndisk = global.get(\"LORIDANE.timedisk.disk\")||{};\n\nsetTimeout(()=>node.status({}),5000);\n\nfunction senddelayed(obj){\n    node.send(obj);\n}\n\nif(lastnodes.length === 0){\n    for(i=0 , all = nodes.length; i < all ; i++){\n        if(nodes[i].uid != lastnodes[i].uid){\n            newtd = true;\n            break;\n        }\n    }\n}\n\nfind = global.get(\"LORIDANE.funcs.findNode\");\ngetconf = global.get(\"LORIDANE.funcs.getConfig\");\n\ncount = 0;\nnewtd = true;\nif (newtd && !subito){\n    time = 0;\n    for (var gw in gws){\n        for (i=0;i<nodes.length;i++){\n            obj = {payload:`${nodes[i].uid}td:${count};${tdsize};`,topic:`lora/${gws[gw].uid}`};\n            setTimeout(senddelayed,time,obj);\n            time += 50;\n            //node.send({payload:`${nodes[i].uid}td:2;500;`,topic:`lora/${gws[gw].uid};`});\n            count++;\n            disk[nodes[i].uid] = {uid:nodes[i].uid,slot:count,tdsize:tdsize};\n        }\n        obj = {payload:`cn:sync`,topic:`lora/${gws[gw].uid}`};\n        setTimeout(senddelayed,time,obj);\n    }\n    node.status({text: \"Sent new Timedisk\"});\n}\nglobal.set(\"LORIDANE.timedisk.disk\",disk);\n\nif(subito){\n    devs = global.get(\"LORIDANE.classA\");\n    getconf = global.get(\"LORIDANE.funcs.getConfig\");\n    for (var dev of devs){\n        if(disk[dev] !== undefined){\n            //node.warn(disk)\n            obj = {payload:`${dev}td:${disk[dev].slot};${disk[dev].tdsize};`,topic:`lora/${getconf(dev).nextGW}`};\n            senddelayed(obj);\n        }\n    }\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3490e79c.716c88",
        "type": "status",
        "z": "ada10296.06249",
        "name": "",
        "scope": null,
        "x": 460,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6d6bd93a.e97668",
        "type": "inject",
        "z": "ada10296.06249",
        "name": "New timedisk manual trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "e4d7b82.7ce1f48"
            ]
        ]
    },
    {
        "id": "1a746dcd.d51fd2",
        "type": "function",
        "z": "6712fbef.2d8494",
        "name": "Acknowledge",
        "func": "data = msg.data;\n//const devs = global.get(\"LORIDANE.devices\");\n\n// if Lora msg payload is Node UID its an ackn\nif (msg.data.pay == msg.config.node){\n    msg.topic = \"acknowledge\";\n    node.status({text:\"New Device found\"});\n    \n}\nnode.status({});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0625f6.98bf6a",
        "type": "status",
        "z": "6712fbef.2d8494",
        "name": "",
        "scope": null,
        "x": 420,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "5766fe05.480f8",
        "type": "mqtt in",
        "z": "4e984df.de567b4",
        "name": "",
        "topic": "lora/gateway/#",
        "qos": "1",
        "datatype": "utf8",
        "broker": "3be33484.0e776c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "6a479509.a7889c"
            ]
        ]
    },
    {
        "id": "6a479509.a7889c",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "Process incoming Data",
        "func": "raw = msg.payload;\nif(raw === \"pong\")return;\nlet lastmsgs = context.get(\"lastmsgs\")||[];\nconst now  = Date.now();\n\nfunction extractID(pay){\n    let len = 14;\n    this.node = pay.slice(0,len);\n    this.pay = pay.slice(len,pay.length);\n    return this;\n}\n//*/Variant 1 raw json\nif(raw.startsWith(\"{\")){\n    //*/Variant 1 object\n    input = JSON.parse(raw);\n    nodedata = input.payload\n    gateway = input.gw\n    RSSI = input.rssi\n    SNR = input.snr\n    SF = input.sf\n    freq = input.freq;\n    (isNaN(extractID(nodedata).pay))? payload =  extractID(nodedata).pay : payload = parseFloat(extractID(nodedata).pay);\n    node = extractID(nodedata).node;\n}else{\n    // Extract the data from the LoRa msg if ;-split string\n    input  = msg.payload.split(\";\");\n    nodedata = input[0];\n    gateway = extractID(input[1]).node;\n    RSSI = parseInt(input[2]);\n    SNR = parseFloat(input[3]);\n    SF = parseInt(input[4]);\n    freq = parseInt(input[5]);\n    payload = extractID(nodedata).pay;\n    node = extractID(nodedata).node;\n}\n\nignorelist = global.get(\"LORIDANE.ignorelist\")||[];\nignore = (ignorelist.indexOf(node) != -1 && ignorelist.indexOf(gateway) != -1);\n\nif(ignore)return;\n\n// object that takes all data from the msg\nmsg.data = {\n    pay: payload,\n    gw: gateway,\n    node: node,\n    freq: freq,\n    sf: SF,\n    rssi: RSSI,\n    snr: SNR,\n    lastSeen: now,\n};\n    \n//object that will be passed through the core nodes\nmsg.config = {\n    gw: gateway,\n    node: node,\n    freq: freq,\n    sf: SF,\n    lastSeen: now,\n};\n\nmsg.raw = raw; // the raw LoRa msg\nmsg.payload = payload; // the actual payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            [
                "1c0ac556.46e25b"
            ]
        ]
    },
    {
        "id": "f7a51ace.7907f8",
        "type": "status",
        "z": "4e984df.de567b4",
        "name": "",
        "scope": [
            "5766fe05.480f8",
            "6a479509.a7889c",
            "f023d975.deb8d8",
            "ace12ad7.be1258",
            "e8e230ba.be0de",
            "1c0ac556.46e25b",
            "bb9d0db9.4979b",
            "c4a84594.067618",
            "45de5a13.5445f4",
            "b2d51542.edd3b8",
            "5e2b324a.5f839c",
            "3d42dae8.ad8c96",
            "6778ed4.7aa9a14",
            "340c50f1.6dadc",
            "38d8c130.658fee"
        ],
        "x": 460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f023d975.deb8d8",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "msg.data.pay to msg.payload",
        "func": "let payload = msg.data.pay;\nconst checkUID = global.get(\"LORIDANE.funcs.checkUID\");\n\nif(payload == \"+\")return;\nif(!checkUID(msg.data.node))return;\n\ntopic = msg.topic;\n\n//cut the data object to the minimum\nmsg = {payload:payload, topic:topic, data:msg.data, config:msg.config};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 180,
        "wires": [
            [
                "bb9d0db9.4979b",
                "af3bda90.002258",
                "10aa9bc2.dd3dd4",
                "b3b76bf0.aef8c8"
            ]
        ]
    },
    {
        "id": "ace12ad7.be1258",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "Confirmation of configuration messages via '+' payload",
        "func": "if(msg.data.pay != \"+\")return;\n\nfunction getNextGW(uid){\n    nodes = global.get(\"LORIDANE.devices.nodes\");\n    for (var device in nodes){\n        if (nodes[device].uid === uid){\n            return nodes[device].nextGW;\n        }\n        return undefined;\n    }\n}\n\nlet confirm = global.get(\"LORIDANE.confirm\");\nnow = Date.now();\nfrom = msg.data.node;\nsize = global.get(\"LORIDANE.timedisk.size\");\n\nfor(i=0;i<confirm.length;){\n    if(from == confirm[i].uid && msg.data.pay == \"+\") {\n        confirm.splice(i,1);\n        global.set(\"LORIDANE.confirm\",confirm);\n    }else if(now - confirm[i].time >= 5*size){\n        msg = {payload: confirm[i].out, topic:\"lora/\"+getNextGW(from)};\n        confirm.splice(i,1);\n        global.set(\"LORIDANE.confirm\",confirm);\n        node.send(msg);\n    }else if(now - confirm[i].time >= 10*size){\n        confirm.splice(i,1);\n        global.set(\"LORIDANE.confirm\",confirm);\n    }else{\n        i++;\n    }\n}\nglobal.set(\"LORIDANE.confirm\",confirm);\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 300,
        "wires": [
            [
                "a918650.4c9da98"
            ]
        ]
    },
    {
        "id": "a918650.4c9da98",
        "type": "subflow:2fad0fdc.1d24b",
        "z": "4e984df.de567b4",
        "name": "",
        "env": [],
        "x": 1300,
        "y": 460,
        "wires": []
    },
    {
        "id": "e8e230ba.be0de",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "decrypt",
        "func": "if(global.get(\"LORIDANE.settings.encryption.enganged\") !== true) return msg;\n\n// Only decrypt when payload es ciphered\nconst cr = global.get(\"crjs\")\nconst crypt = global.get(\"LORIDANE.crypt\")\nconst iv = crypt.iv\nconst key = crypt.key\n\nvar bytes  = cr.AES.decrypt( msg.data.pay, key, {\n  iv: iv,\n  mode: cr.mode.CBC,\n  padding: cr.pad.ZeroPadding\n});\n\nvar plaintext = bytes.toString(cr.enc.Utf8); //Base64\nmsg.data.pay = plaintext;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            [
                "f023d975.deb8d8",
                "ace12ad7.be1258"
            ]
        ]
    },
    {
        "id": "1c0ac556.46e25b",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "filter msg from multiple gw",
        "func": "lastmsgs = context.get(\"lastmsgs\")||[];\nconst newmsg = msg;\nlet timer = context.get(\"timer\");\nclearTimeout(timer);\ncontext.set(\"timer\",timer);\nlet newmsgbool;\n\nfunction send(lastmsgs){\n    for(var msg of lastmsgs){\n        node.send(msg)\n    }\n    context.set(\"lastmsgs\",[]);\n}\n\nnow = Date.now();\nif(lastmsgs != []){\n    newmsgbool = true;\n    for (ms=0;ms<lastmsgs.length;/**only increment in else*/){\n        if(now - lastmsgs[ms].data.lastSeen >= 100){\n            lastmsgs.splice(ms,1);\n        }else{\n            ms++;\n        }\n    }\n\n    for (ms=0;ms<lastmsgs.length;/**only increment in else*/){\n        if(newmsg.data.pay == lastmsgs[ms].data.pay && newmsg.data.node == lastmsgs[ms].data.node){\n            newmsgbool = false;\n            if(newmsg.data.rssi > lastmsgs[ms].data.rssi && now - lastmsgs[ms].data.lastSeen <= 100){\n                lastmsgs[ms] = newmsg;\n                break;\n            }\n        }\n        ms++;\n    }\n}\n\nif(newmsgbool)lastmsgs.push(newmsg);\ncontext.set(\"lastmsgs\",lastmsgs);\ntimer = setTimeout(send,100,lastmsgs);\ncontext.set(\"timer\",timer);\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "e8e230ba.be0de"
            ]
        ]
    },
    {
        "id": "bb9d0db9.4979b",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "admit",
        "func": "node = msg.data.node;\ngw = msg.data.gw;\npayload = msg.payload;\n\nfindGW = global.get(\"LORIDANE.funcs.findGW\");\nfindNode = global.get(\"LORIDANE.funcs.findNode\");\nadmit = global.get(\"LORIDANE.admit\")||[];\ncheckUID = global.get(\"LORIDANE.funcs.checkUID\");\n\n\nindexgw = findGW(gw);\nindexnode = findNode(node);\n\nUIDvalid = (checkUID(node) && checkUID(gw));\nif((indexgw >= 0 && indexnode >= 0) || !UIDvalid )return;\n\nif(indexgw == -1){\n    admit.push(gw);\n}\nif(indexnode == -1){\n    if(payload == node){\n        admit.push(node);\n    }\n}\n\nglobal.set(\"LORIDANE.admit\",admit);\n\nif(admit.length > 0){\n    msg.admit = admit;\n    return msg;\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "38d8c130.658fee",
                "c4a84594.067618"
            ]
        ]
    },
    {
        "id": "38d8c130.658fee",
        "type": "ui_toast",
        "z": "4e984df.de567b4",
        "position": "dialog",
        "displayTime": "6",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK, Change Tab",
        "cancel": "Later",
        "raw": false,
        "topic": "New Devices ask for Admittance",
        "name": "Admittance",
        "x": 1190,
        "y": 180,
        "wires": [
            [
                "340c50f1.6dadc"
            ]
        ]
    },
    {
        "id": "340c50f1.6dadc",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "change tab to ADMITTANCE",
        "func": "if(msg.payload != \"OK, Change Tab\")return;\nmsg.payload = {\"tab\":\"Admittance\"}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 180,
        "wires": [
            [
                "6778ed4.7aa9a14"
            ]
        ]
    },
    {
        "id": "6778ed4.7aa9a14",
        "type": "ui_ui_control",
        "z": "4e984df.de567b4",
        "name": "",
        "events": "all",
        "x": 1640,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3d42dae8.ad8c96",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "change tab to MSGS",
        "func": "msg.payload = {\"tab\":\"Messages\"}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 300,
        "wires": [
            [
                "5e2b324a.5f839c",
                "6778ed4.7aa9a14"
            ]
        ]
    },
    {
        "id": "89c2a1bf.a0465",
        "type": "ui_dropdown",
        "z": "4e984df.de567b4",
        "name": "admit dropdown",
        "label": "",
        "tooltip": "",
        "place": "Select Devices To Admit, The Rest Will Be Tossed!",
        "group": "11c9f05.acda51",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": true,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "3d42dae8.ad8c96",
                "45de5a13.5445f4"
            ]
        ]
    },
    {
        "id": "c4a84594.067618",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "",
        "func": "return {options:msg.admit};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1175,
        "y": 240,
        "wires": [
            [
                "89c2a1bf.a0465"
            ]
        ],
        "l": false
    },
    {
        "id": "45de5a13.5445f4",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "save admission",
        "func": "let wantAdmittance = global.get(\"LORIDANE.admit\");\nlet admitted = msg.payload;\nconst findGW = global.get(\"LORIDANE.funcs.findGW\");\nconst findNode = global.get(\"LORIDANE.funcs.findNode\");\nconst deleteDevice = global.get(\"LORIDANE.funcs.deleteDevice\");\nconst writeConfig = global.get(\"LORIDANE.funcs.writeConfig\");\nlet ignorelist = global.get(\"LORIDANE.ignorelist\");\n\nfor (var device of wantAdmittance){\n    if(admitted.indexOf(device) >= -1){\n        wantAdmittance.splice(wantAdmittance.indexOf(device),1);\n    }\n}\n\n\nfor(device of wantAdmittance){\n    deleteDevice(device)\n    ignorelist.push(device)\n}\nglobal.set([\"LORIDANE.admit\",\"LORIDANE.ignorelist\"],[[],ignorelist]);\nwriteConfig();\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b2d51542.edd3b8",
        "type": "debug",
        "z": "4e984df.de567b4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 360,
        "wires": []
    },
    {
        "id": "5e2b324a.5f839c",
        "type": "ui_toast",
        "z": "4e984df.de567b4",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Admitted!",
        "name": "admission notification",
        "x": 1690,
        "y": 300,
        "wires": []
    },
    {
        "id": "af3bda90.002258",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "new timedisk when acknowledge",
        "func": "if(msg.payload != msg.data.node)return;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "10aa9bc2.dd3dd4",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "reset interval",
        "func": "if (msg.data.pay != msg.data.node)return;\n\nfunction sendDelay(msg){\n    node.send(msg);\n}\n\nconst find = global.get(\"LORIDANE.funcs.findNode\");\nconst getConfig = global.get(\"LORIDANE.funcs.getConfig\");\nlet UID = msg.data.node;\nconst getGWs = global.get(\"LORIDANE.funcs.getUIDGW\");\n\nlet index = find(UID);\nif(index == -1)return;\n\nconst interval = Math.floor(getConfig(UID).lastinterval / 1000) * 1000;\n\nif (interval < 5000)return;\nlet gateways  = getGWs();\n\nmsg.payload = UID+\"iv:\"+interval;\nfor(var gw of gateways){\n    msg.topic = \"lora/\"+gw;\n    setTimeout(sendDelay,15000,msg);\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 240,
        "wires": [
            [
                "a918650.4c9da98",
                "b2d51542.edd3b8"
            ]
        ]
    },
    {
        "id": "b3b76bf0.aef8c8",
        "type": "function",
        "z": "4e984df.de567b4",
        "name": "timedisk to classA",
        "func": "classA = global.get(\"LORIDANE.classA\")||[];\nif(classA.indexOf(msg.data.node) != -1){\n    msg.topic = \"subito\";\n    //node.warn(\"Subito!\")\n    return msg;\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "90cd8175.15ea4",
        "type": "mqtt out",
        "z": "2fad0fdc.1d24b",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3be33484.0e776c",
        "x": 650,
        "y": 100,
        "wires": []
    },
    {
        "id": "d505a1dd.b771d",
        "type": "function",
        "z": "2fad0fdc.1d24b",
        "name": "Test Downlink",
        "func": "function checkdevices(arr,fun){\n    for (var j in array){\n        if (!fun(arr[j]) || !arr[j].startsWith(\"NO:\")){\n            node.error(`The Device @Index ${j} \"${arr[j]}\" is no valid DeviceUID`);\n            return false;\n        }\n        return true;\n    }\n}\n\nlet inData = msg.payload;\n\nif(typeof(inData) == \"string\"){\n    return msg;\n}\n\nlet downdataNO = \"\";\nlet downdataGW = \"\";\nlet checkUID = global.get(\"funcs.checkUID\");\nlet deffreq = (msg.freq !== undefined);\nlet defsf = (msg.sf !== undefined);\nlet deftx =  (msg.tx !== undefined);\nlet defdevice = (msg.device !== undefined);\nlet prefix = \"\";\n\nif(!defdevice){\n    node.warn(\"Invalid msg.device\");\n}\nif(!msg.topic.startsWith(\"lora/\")){\n    node.warn(\"Invalid msg.topic\");\n}\n\nif(msg.device.length == 1 && msg.device[0].length >= 1 && checkdevices(msg.device[0],checkUID)){\n   for (var i of msg.devices[0]){\n    node.send({payload: i+downDataNO,topic:msg.topic});\n   }\n}\n\nif(msg.device.includes(\"nodes\")){\n    prefix += \"cn:\";\n    if (deffreq){\n        downdataNO += \"fn:\"+msg.freq+\";\";\n    }\n    if (defsf){\n        downdataNO += \"sn:\"+msg.sf+\";\";\n    }\n    if(deftx){\n        downdataNO += \"tn:\"+msg.tx+\";\";\n    }\n}\n\nif(msg.device.includes(\"gateways\")){\n    prefix += \"cg:\";\n     if (deffreq){\n        downdataGW += \"fg:\"+msg.freq+\";\";\n    }\n    if (defsf){\n        downdataGW += \"sg:\"+msg.sf+\";\";\n    }\n    if(deftx){\n        downdataGW += \"tg:\"+msg.tx+\";\";\n    }\n}\nnode.send({payload: prefix + downdataNO + downdataGW ,topic:msg.topic});\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1a95a2d5.655b3d",
        "type": "function",
        "z": "2fad0fdc.1d24b",
        "name": "Send in Timerframe",
        "func": "function sendmsg(msg){\n    node.send(msg)\n}\n// load needed data from context\nnow = Date.now();\ntimedisk = global.get(\"LORIDANE.timedisk\")||{size:1500,count:5};\nlastmsg = context.get(\"lastmsg\")||0;\nnow = Date.now();\ncontext.set(\"lastmsg\",now + 15);\nsize = timedisk.size;\ntimeinframe = (now - lastmsg)%size;\nsf = global.get(\"LORIDANE.devices.gw[0].sf\")||7;\nsendtime = size - Math.round((50 * 2**sf) / (sf * 1e5));\nuntilsend = sendtime - timeinframe;\n\n// check when the timeframe for the gateway is reached\nif(untilsend < 0){\n    untilsend = size - timeinframe + sendtime;\n    setTimeout(sendmsg,untilsend,msg);\n}else{\n    setTimeout(sendmsg,untilsend,msg);\n    node.status({text:\"Delayed msg for \"+untilsend+\" ms\"});\n}\n\n//check if in the to be confirmed array is old data\nlet confirm = global.get(\"LORIDANE.confirm\")||[];\nif (confirm.length > 0){\n    for(var con in confirm){\n        if(now - confirm[con].time >= 10*size){\n            confirm.splice(con,1);\n        }\n    }\n}\n\n//save outgoing msgs to the confirmation scope\nif(msg.payload.startsWith(\"NO\")){\n    obj = {uid: msg.payload.substring(0,14), out:msg.payload, time: now};\n    confirm.push(obj);\n}\n//except sync msgs\nif(msg.payload.includes(\"cn:\") && !msg.payload.includes(\"sync\")){\n    nodes = global.get(\"LORIDANE.devices.nodes\");\n    for(var nd in nodes){\n        obj = {uid: nodes[nd].uid, out:msg.payload, time: now};\n        confirm.push(obj);\n    }\n}\nglobal.set(\"LORIDANE.confirm\",confirm);\n\nnode.status({text:\"Delayed msg for \"+untilsend+\" ms\"});\nsetTimeout(() => node.status({text:\"\"}),3000);\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "90cd8175.15ea4"
            ]
        ]
    },
    {
        "id": "1792be97.4020f1",
        "type": "status",
        "z": "2fad0fdc.1d24b",
        "name": "",
        "scope": null,
        "x": 470,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "bd6188af.c82468",
        "type": "status",
        "z": "364ae788.0e6328",
        "name": "",
        "scope": [
            "f9389fb4.1d491"
        ],
        "x": 320,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "82c27a6c.0a2258",
        "type": "function",
        "z": "364ae788.0e6328",
        "name": "add new node",
        "func": "//if (msg.friendlyname !== undefined){return}\n\nblock = flow.get(\"block\")|| false;\ngateways = global.get(\"LORIDANE.devices.gw\")||[];\nsetTimeout(()=> node.status({}),5000);\n\nfunction sendDelayed(arr){\n    node.send(arr);\n}\n\n//reset the config of the gateay after 10 secs to values before\nfunction resetConfig(){\n    flow.set(\"block\",false);\n    gateways = flow.get(\"lastGatewayParams\")||[];\n    flow.set(\"lastGatewayParams\",[]);\n    \n    for(var gateway in gateways){\n    node.send([null,{payload:`cg:fg:${gateways[gateway].freq / 100000};sg:${gateways[gateway].sf};`,topic:`lora/${gateways[gateway].uid}`}]);\n    }\n    node.status({text:`Reset Configuration to: \"cg:fg:${gateways[gateway].freq / 100000};sg:${gateways[gateway].sf};\"`});\n    \n}\n\nlet timer;\nlet gateway;\n\n\nif((msg.topic != \"syncfrequency\" || msg.topic != \"acknowledge\" ) && block){\n    node.status({text:\"Blocked and Waiting for New Devices\"});\n    return;\n}else if(msg.topic == \"syncfrequency\"){\n    flow.set(\"block\",true);\n    flow.set(\"lastGatewayParams\",gateways),\n    timer = clearTimeout(timer);\n    //gateways = global.get(\"LORIDANE.devices.gw\");\n\n    for(gateway in gateways){\n        node.send([null,{payload:\"cg:fg:8670;sg:7;\",topic:`lora/${gateways[gateway].uid}`}]);\n        setTimeout(sendDelayed,500,[null,{payload:`cn:fn:${gateways[gateway].freq / 100000};sn:${gateways[gateway].sf};`,topic:`lora/${gateways[gateway].uid}`}]);\n    }\n    node.status({text:`Configuration Sent to GWs: \"cg:fg:8670;sg:7;\"`});\n    timer = setTimeout(resetConfig,10500);\n    flow.set(\"timer\",timer);\n    return;\n}else if(msg.topic == \"acknowledge\"){\n    node.send([msg,null]);\n    flow.set(\"block\",true);\n    flow.set(\"lastGatewayParams\",gateways),\n    timer = clearTimeout(timer);\n    gateways = global.get(\"LORIDANE.devices.gw\");\n    msg.data.pay = -1;\n    \n    if (gateways != []){\n        for(gateway in gateways){\n            node.send([msg,{payload:`cn:fn:${gateways[gateway].freq / 100000};sn:${gateways[gateway].sf};`,topic:`lora/${gateways[gateway].uid}`}]);\n        }\n    }else{\n        node.send([msg,{payload:`cn:fn:${msg.data.freq / 100000};sn:${msg.data.sf};`,topic:`lora/${msg.data.gw}`}]);\n    }\n    node.status({text:`Configuration Sent to GWs: \"cg:fg:8670;sg:7;\"`});\n    timer = setTimeout(resetConfig,10500);\n    flow.set(\"timer\",timer);\n    return;\n}\n\nnode.status({text:\"Passthrough Mode\"});\n\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "4a21c374.73a2cc"
            ],
            [
                "3a9e2be5.c14f04"
            ]
        ]
    },
    {
        "id": "4a21c374.73a2cc",
        "type": "function",
        "z": "364ae788.0e6328",
        "name": "",
        "func": "if(msg === null){\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 240,
        "wires": [
            [
                "aecffc67.3d552"
            ]
        ],
        "l": false
    },
    {
        "id": "3a9e2be5.c14f04",
        "type": "function",
        "z": "364ae788.0e6328",
        "name": "",
        "func": "if(msg === null){\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 280,
        "wires": [
            [
                "7b5b0ef.0d0a9f"
            ]
        ],
        "l": false
    },
    {
        "id": "7b5b0ef.0d0a9f",
        "type": "subflow:2fad0fdc.1d24b",
        "z": "364ae788.0e6328",
        "name": "",
        "env": [],
        "x": 720,
        "y": 280,
        "wires": []
    },
    {
        "id": "77abdcc2.fad7c4",
        "type": "function",
        "z": "364ae788.0e6328",
        "name": "save friendlyname",
        "func": "if (msg.friendlyname === undefined){\n    return;\n}\n//const USER = global.get(\"LORIDANE.LinuxUsername\");\nconst gws = global.get(\"LORIDANE.devices.gw\");\nlet nds = global.get(\"LORIDANE.devices.nodes\");\n\n// check which device the friendly name update concerns by uid\nfor (var gw in gws){\n    if (msg.friendlyname.uid == gws[gw].uid){\n        gws[gw].friendlyname = msg.friendlyname.name;\n    }\n}\n\nfor (var nd in nds){\n    if (msg.friendlyname.uid == nds[nd].uid){\n        nds[nd].friendlyname = msg.friendlyname.name;\n    }\n}\nglobal.set([\"LORIDANE.devices.gw\",\"LORIDANE.devices.nodes\"],[gws,nds]);\n\nreturn {filename:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "fc54472d.a4ef48"
            ]
        ]
    },
    {
        "id": "72806b9a.0a0354",
        "type": "debug",
        "z": "364ae788.0e6328",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "aecffc67.3d552",
        "type": "function",
        "z": "364ae788.0e6328",
        "name": "Save unknown devices",
        "func": "devices = global.get(\"LORIDANE.devices\")||{gw:[],nodes:[]};\nnewConfig = global.get(\"LORIDANE.classes.newConfig\");\ndata = msg.config;\ncheckUID = global.get(\"LORIDANE.funcs.checkUID\");\nblock = global.get(\"LORIDANE.blockONstart\");\nif(block){return;}\n\n//constructor(UID,type,freq,sf,friendlyname,interval,nextgw)\n\n// New Gateway?\nlet UID = data.gw;\nconst USER = global.get(\"LORIDANE.LinuxUsername\");\n\nlet newdevice = true;\nlet type = \"GW\";\n\nfor (var device in devices.gw){\n    /*\n    if(devices.gw.length === 0){\n        break;\n    }\n    //*/\n    if(devices.gw[device].uid == UID){\n        node.status({text:\"Known Device\"});\n        devices.gw[device].lastSeen = data.lastSeen || Date.now();\n        data.friendlyname = devices.gw[device].friendlyname;\n        newdevice = false;\n        changedConf = (devices.gw[device].freq != data.freq || devices.gw[device].sf != data.sf);\n        if (changedConf){\n            devices.gw[device].nextGW = data.gw;\n            devices.gw[device].freq = data.freq //\n            devices.gw[device].sf = data.sf//\n            conf = devices.gw[device];\n            node.send({/*payload:conf,filename:`/home/${USER}/loridaneHWconfig/gateways/${UID}.json`*/});\n            node.status({text:\"changed GW conf saved\"});\n        }\n    break;\n    }\n}\n\nif(newdevice && UID.startsWith(\"GW\") && checkUID(UID) && data.node != data.gw){\n        conf = new newConfig(UID,type,data.freq,data.sf,data.friendlygw,0,data.friendlygw);\n        devices.gw.push(conf);\n        node.send({/*payload:conf,filename:`/home/${USER}/loridaneHWconfig/gateways/${UID}.json`*/});\n}\n\n\n//New Node?\nnewdevice = true;\nUID = data.node;\ntype = \"energy\";\nfor (device in devices.nodes){\n    /*\n    if(devices.nodes.length === 0){\n        break;\n    }\n    //*/\n    if(devices.nodes[device].uid == UID){\n        devices.nodes[device].lastinterval = devices.nodes[device].interval;\n        devices.nodes[device].interval = data.lastSeen - devices.nodes[device].lastSeen;\n        devices.nodes[device].lastSeen = data.lastSeen;\n        //data.friendlyname = devices.nodes[device].friendlyname;\n        newdevice = false;\n        changedConf = (devices.nodes[device].freq != data.freq || devices.nodes[device].sf != data.sf || data.gw != devices.nodes[device].nextGW);\n        if (changedConf){ //  if it is not a new unknown uid it might be a changed configuration\n            devices.nodes[device].nextGW = data.gw;\n            devices.nodes[device].freq = data.freq //\n            devices.nodes[device].sf = data.sf//\n            conf = devices.nodes[device];\n            node.send({/*payload:conf,filename:`/home/${USER}/loridaneHWconfig/nodes/${UID}.json`*/});\n            node.status({text:\"changed conf saved\"});\n        }\n        break;\n    }\n}\nif(newdevice && UID.startsWith(\"NO\") && checkUID(UID)){\n    conf = new newConfig(UID,type,data.freq,data.sf,data.friendlyname,0,data.gw); //uses class definition for new device\n    conf.nextGW = data.gw;\n    conf.tx = 20;\n    devices.nodes.push(conf);\n    node.send({/*payload:conf,filename:`/home/${USER}/loridaneHWconfig/nodes/${UID}.json`*/});\n}\nsetTimeout(() => node.status({}),3000);\nmsg.config = devices;//data;\nglobal.set(\"LORIDANE.devices\",devices);\n\ntd = global.get(\"LORIDANE.timedisk\");\nif(td === undefined){\n    return null; // null is an empty object but triggers the timedisk function\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "fc54472d.a4ef48"
            ]
        ]
    },
    {
        "id": "fc54472d.a4ef48",
        "type": "function",
        "z": "364ae788.0e6328",
        "name": "write config file",
        "func": "if(msg.filename === undefined){return}\nconst fs = global.get(\"fs\");\nvar loridane =  global.get(\"LORIDANE\");\nconst configpath = loridane.settings.path.config;\n//delete loridane.timedisk;\ndelete loridane.homepath;\n//delete loridane.settings;\n//loridane.blockONstart = false;\nconst loridaneString = JSON.stringify(loridane,null,2);\nfs.writeFileSync(configpath+\"memCacheLoridane.json\",loridaneString)\nreturn {payload:loridane};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c07ea9.8a444",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "fn:8650;fg:8650;",
        "payloadType": "str",
        "x": 340,
        "y": 1000,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "862ff2cc.15c2e",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "name": "Listen to 867Mhz for 10 secs",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "syncfrequency",
        "x": 360,
        "y": 180,
        "wires": [
            [
                "32bd7baa.d97b84"
            ]
        ]
    },
    {
        "id": "32bd7baa.d97b84",
        "type": "subflow:364ae788.0e6328",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "Save new devices",
        "env": [],
        "x": 750,
        "y": 340,
        "wires": [
            [
                "84f194f0.98f118",
                "91387791.465208",
                "96e88eff.65928"
            ]
        ]
    },
    {
        "id": "2269f9a3.74bc46",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "fn:8670;cn:cg:fg:8670;",
        "payloadType": "str",
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "84f194f0.98f118",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 400,
        "wires": []
    },
    {
        "id": "22e7e77c.e3a278",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "cn:cg:fn:8640;fg:8640;",
        "payloadType": "str",
        "x": 460,
        "y": 1080,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "8b8be6c.bb37118",
        "type": "subflow:2fad0fdc.1d24b",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "env": [],
        "x": 700,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f4bb67bd.d39b98",
        "type": "subflow:4e984df.de567b4",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 160,
        "y": 420,
        "wires": [
            [
                "c6397117.2fd33",
                "8d9b21fb.c4275",
                "a92d9ccf.7a839",
                "48d31a4b.9b3544"
            ],
            [
                "713d228e.dde67c",
                "dcee77a5.339a48"
            ],
            [
                "c2a7d48a.8b7dc8"
            ]
        ]
    },
    {
        "id": "8d9b21fb.c4275",
        "type": "subflow:6712fbef.2d8494",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 420,
        "y": 380,
        "wires": [
            [
                "32bd7baa.d97b84",
                "74e3460a.4c1b38"
            ]
        ]
    },
    {
        "id": "c6397117.2fd33",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "config",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 240,
        "wires": []
    },
    {
        "id": "713d228e.dde67c",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 460,
        "wires": []
    },
    {
        "id": "7f63c285.112a6c",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 840,
        "wires": []
    },
    {
        "id": "9f216e3.3ebfd9",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "11",
        "topic": "lora/GWF008D1C8D658",
        "payload": "NO84CCA84ADF70iv:400",
        "payloadType": "str",
        "x": 370,
        "y": 800,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ],
        "info": "Sends Timesync to Nodes"
    },
    {
        "id": "f7c8f902.ba6358",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "cn:iv:600000;",
        "payloadType": "str",
        "x": 510,
        "y": 960,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "6f40b123.85031",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "cn:iv:5000;",
        "payloadType": "str",
        "x": 500,
        "y": 880,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "a1c83a72.deb3d8",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GW:F0:08:D1:C8:D6:58",
        "payload": "cn:sync;",
        "payloadType": "str",
        "x": 680,
        "y": 800,
        "wires": [
            [
                "7f63c285.112a6c",
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "91387791.465208",
        "type": "subflow:ada10296.06249",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 900,
        "y": 480,
        "wires": [
            [
                "462cebc3.de6054",
                "659d2117.5091"
            ]
        ]
    },
    {
        "id": "36868927.261126",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "name": "New timedisk manual trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 860,
        "y": 640,
        "wires": [
            [
                "91387791.465208"
            ]
        ]
    },
    {
        "id": "462cebc3.de6054",
        "type": "subflow:2fad0fdc.1d24b",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 1160,
        "y": 480,
        "wires": []
    },
    {
        "id": "d92e9da8.79e03",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "cn:iv:15000;",
        "payloadType": "str",
        "x": 510,
        "y": 920,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "a92d9ccf.7a839",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 280,
        "wires": []
    },
    {
        "id": "74e3460a.4c1b38",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 640,
        "wires": []
    },
    {
        "id": "8ed3f24e.7d554",
        "type": "subflow:1395c386.064e8c",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 140,
        "y": 340,
        "wires": []
    },
    {
        "id": "40bc1de0.b21fe4",
        "type": "comment",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "Test Configuration Downlink",
        "info": "",
        "x": 600,
        "y": 740,
        "wires": []
    },
    {
        "id": "ae7a5c97.cc6aa",
        "type": "comment",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "Core Functions",
        "info": "",
        "x": 660,
        "y": 300,
        "wires": []
    },
    {
        "id": "659d2117.5091",
        "type": "debug",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 640,
        "wires": []
    },
    {
        "id": "42890313.99adec",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "g": "2baadb05.c532f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/GWF008D1C8D658",
        "payload": "cn:iv:500;",
        "payloadType": "str",
        "x": 460,
        "y": 840,
        "wires": [
            [
                "8b8be6c.bb37118"
            ]
        ]
    },
    {
        "id": "96e88eff.65928",
        "type": "subflow:922120e5.5b086",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 690,
        "y": 400,
        "wires": [
            [
                "32bd7baa.d97b84"
            ]
        ]
    },
    {
        "id": "514c816a.24ad6",
        "type": "subflow:c23de0ef.dae5f",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 1160,
        "y": 420,
        "wires": []
    },
    {
        "id": "48d31a4b.9b3544",
        "type": "subflow:d7577d7f.0f9b4",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "",
        "env": [],
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "dcee77a5.339a48",
        "type": "link out",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "LORIDANE - Payload Out",
        "links": [
            "1b5f4c28.4087d4",
            "bb1f1568.14d978",
            "9316dcde.92d3b",
            "8af4cb01.be0b88"
        ],
        "x": 325,
        "y": 500,
        "wires": []
    },
    {
        "id": "f4f736ad.a815a8",
        "type": "mqtt out",
        "z": "20f0b4a8.24eafc",
        "name": "test trigger",
        "topic": "lora/gateway/",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3be33484.0e776c",
        "x": 430,
        "y": 80,
        "wires": []
    },
    {
        "id": "d7c76a27.821278",
        "type": "inject",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "943b015b.8fc56"
            ]
        ]
    },
    {
        "id": "943b015b.8fc56",
        "type": "function",
        "z": "20f0b4a8.24eafc",
        "name": "",
        "func": "function randval(min,max){\n    return min+Math.random()*(max-min);\n}\n\nmsg.payload = `{\"payload\":\"NO1234567890AB${randval(1,20000)}\",\n    \"gw\":\"GW1234567890AB\",\n    \"rssi\":${Math.round(randval(-120,0))},\n    \"snr\":${randval(-10,12)},\n    \"sf\":7,\n    \"freq\":867000000}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 315,
        "y": 80,
        "wires": [
            [
                "f4f736ad.a815a8"
            ]
        ],
        "l": false
    },
    {
        "id": "c2a7d48a.8b7dc8",
        "type": "link out",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "trigger TD",
        "links": [
            "ba03182a.053b38"
        ],
        "x": 315,
        "y": 540,
        "wires": []
    },
    {
        "id": "ba03182a.053b38",
        "type": "link in",
        "z": "20f0b4a8.24eafc",
        "g": "4936118b.229c4",
        "name": "trigger new TD in",
        "links": [
            "c2a7d48a.8b7dc8"
        ],
        "x": 695,
        "y": 480,
        "wires": [
            [
                "91387791.465208"
            ]
        ]
    },
    {
        "id": "c16145aa.1940d8",
        "type": "inject",
        "z": "b18c33b4.d2deb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "3e29f0eb.10f7"
            ]
        ]
    },
    {
        "id": "63842f53.d4ef5",
        "type": "exec",
        "z": "b18c33b4.d2deb",
        "command": "sudo systemctl start mosquitto",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 100,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "276b071.49427f8",
        "type": "inject",
        "z": "b18c33b4.d2deb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 340,
        "wires": [
            [
                "835a5c64.4582c"
            ]
        ]
    },
    {
        "id": "b0c8dbf5.29e058",
        "type": "debug",
        "z": "b18c33b4.d2deb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "835a5c64.4582c",
        "type": "exec",
        "z": "b18c33b4.d2deb",
        "command": "cd && cd ..&& ls",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 520,
        "y": 340,
        "wires": [
            [
                "b0c8dbf5.29e058"
            ],
            [],
            []
        ]
    },
    {
        "id": "3e29f0eb.10f7",
        "type": "exec",
        "z": "b18c33b4.d2deb",
        "command": "pidof mosquitto",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "bab34bac.589168",
                "66504391.d4e87c"
            ],
            [],
            []
        ]
    },
    {
        "id": "bab34bac.589168",
        "type": "function",
        "z": "b18c33b4.d2deb",
        "name": "",
        "func": "if(!msg.payload){\n    return msg;\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "66504391.d4e87c",
                "63842f53.d4ef5"
            ]
        ]
    },
    {
        "id": "66504391.d4e87c",
        "type": "debug",
        "z": "b18c33b4.d2deb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "ddaf7bdb.83ecc8",
        "type": "function",
        "z": "b18c33b4.d2deb",
        "name": "set ClassA devs",
        "func": "arr = [\"NOF008D1C8DC20\"];\nglobal.set(\"LORIDANE.classA\",arr);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "a03ae50b.1c2798"
            ]
        ]
    },
    {
        "id": "108889aa.e56696",
        "type": "inject",
        "z": "b18c33b4.d2deb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "ddaf7bdb.83ecc8"
            ]
        ]
    },
    {
        "id": "a03ae50b.1c2798",
        "type": "debug",
        "z": "b18c33b4.d2deb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "beb55e6.f9442a",
        "type": "serial in",
        "z": "a4cddca9.8d353",
        "d": true,
        "name": "",
        "serial": "d726f7d4.e188a8",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "a1fa5930.a56fa8"
            ]
        ]
    },
    {
        "id": "a1fa5930.a56fa8",
        "type": "debug",
        "z": "a4cddca9.8d353",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "bb1f1568.14d978",
        "type": "link in",
        "z": "e1d714ec.ccad48",
        "name": "Data Processing in",
        "links": [
            "dcee77a5.339a48"
        ],
        "x": 115,
        "y": 160,
        "wires": [
            [
                "b238104c.1cc29"
            ]
        ]
    },
    {
        "id": "b238104c.1cc29",
        "type": "function",
        "z": "e1d714ec.ccad48",
        "name": "Filter Nodes ONRO",
        "func": "\nnodes = [\n    \"NO94B97EC0C46C\",\n    //\"NO:94:B9:7E:C0:C3:1C\"\n    ];\n\nif (nodes.indexOf(msg.data.node) == -1){\n    return;\n}\n\npay = msg.payload.split(\";\");\n\nif(pay[0] == \"+\"){\n    return;\n}\nwatthours = parseFloat(pay[0])\nwatts = parseFloat(pay[1])\nmsg.payload = {watts:watts,watthours:watthours};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "9555c92e.722488",
                "2a4fe647.a77fba"
            ]
        ]
    },
    {
        "id": "2a4fe647.a77fba",
        "type": "debug",
        "z": "e1d714ec.ccad48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "28199361.b4391c",
        "type": "ui_gauge",
        "z": "e1d714ec.ccad48",
        "name": "Leistung ONRO",
        "group": "bf837bc6.2c47f8",
        "order": 4,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Leistung - ONRO Zähler",
        "label": "Watt",
        "format": "{{value|number:2}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#3fadb5",
            "#3fadb5",
            "#3fadb5"
        ],
        "seg1": "",
        "seg2": "",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "9555c92e.722488",
        "type": "function",
        "z": "e1d714ec.ccad48",
        "name": "Set DataSet",
        "func": "if(msg.topic == \"offset\"){\n    UID = msg.data.node\n    reading = parseFloat(msg.payload.set.replace(\",\",\".\"));\n    power = 0;\n    global.set(`LORIDANE.data.${UID}.lastreading`,reading);\n    return;\n}\n//if (isNaN(msg.payload)){return}\ndata = msg.data\nUID = data.node;\ntime = new Date(data.lastSeen)||new Date.now();\nshowtime = time.toLocaleString(\"de-DE\");\ndate = time.toISOString().substr(0,7);\nUSER = global.get(\"LORIDANE.LinuxUsername\")\nwriteConfig = global.get(\"LORIDANE.funcs.writeConfig\");\n\n//----------------------------------------\n//Calc power\nfunction getpower(input){\n    const now = Date.now();\n    const lasttime = flow.get(`data.${UID}.lasttime`)||0;\n    flow.set(`data.${UID}.lasttime`,now);\n    const msInhours = 3600000;\n\n    interval = now-lasttime;\n    ivperhour= msInhours / interval;\n    value = Math.round(input * ivperhour*100)/100;\n\n    if(value > 55000){\n        return;\n    }\n    return value;\n}\n//------------------------------------------\n//set object\nlastreading = global.get(`LORIDANE.data.${UID}.lastreading`)||0;\nreading = lastreading + (msg.payload.watthours/1000);\nconst obj = {\n    reading : reading,\n    power : msg.payload.watts,\n    timestamp : data.lastSeen,\n    time:showtime,\n    powerunit: \"Watt\",\n    readingunit: \"kWh\"\n}\nif(obj.reading > 0)global.set(`LORIDANE.data.${UID}.lastreading`,reading);\nif(obj.reading !== null && obj.power !== null){\n    msg.filename = `/home/${USER}/LORIDANE/database/${UID}/${UID}_${date}.json`;\n    writeConfig();\n}\nmsg.payload = obj;\n\nreturn;//  msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "339b57f2.1dbcf8",
                "e577eef3.1f78f",
                "c5edeb1b.e0c6a8"
            ]
        ]
    },
    {
        "id": "c2305aff.368c08",
        "type": "ui_chart",
        "z": "e1d714ec.ccad48",
        "name": "",
        "group": "bf837bc6.2c47f8",
        "order": 12,
        "width": 8,
        "height": 4,
        "label": "Letzte 12 Stunden",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 990,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "903c4bd.c3f60b8",
        "type": "inject",
        "z": "e1d714ec.ccad48",
        "name": "clear",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 810,
        "y": 240,
        "wires": [
            [
                "c2305aff.368c08"
            ]
        ]
    },
    {
        "id": "339b57f2.1dbcf8",
        "type": "debug",
        "z": "e1d714ec.ccad48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "87c0777b.2a3268",
        "type": "change",
        "z": "e1d714ec.ccad48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.power",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 835,
        "y": 200,
        "wires": [
            [
                "c2305aff.368c08",
                "28199361.b4391c"
            ]
        ],
        "l": false
    },
    {
        "id": "da32c0dc.f941f",
        "type": "ui_button",
        "z": "e1d714ec.ccad48",
        "name": "",
        "group": "bf837bc6.2c47f8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear View",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-trash-o",
        "payload": "[]",
        "payloadType": "json",
        "topic": "clear",
        "topicType": "str",
        "x": 810,
        "y": 280,
        "wires": [
            [
                "c2305aff.368c08"
            ]
        ]
    },
    {
        "id": "46c71837.243b98",
        "type": "inject",
        "z": "e1d714ec.ccad48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "data.node",
                "v": "NO94B97EC0C46C",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "offset",
        "payload": "60.51",
        "payloadType": "num",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "9555c92e.722488"
            ]
        ]
    },
    {
        "id": "e577eef3.1f78f",
        "type": "file",
        "z": "e1d714ec.ccad48",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 320,
        "wires": [
            [
                "c404aacf.a41728"
            ]
        ]
    },
    {
        "id": "c404aacf.a41728",
        "type": "debug",
        "z": "e1d714ec.ccad48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "83f29945.7fa948",
        "type": "ui_text",
        "z": "e1d714ec.ccad48",
        "group": "bf837bc6.2c47f8",
        "order": 2,
        "width": 8,
        "height": 2,
        "name": "",
        "label": "Zählerstand",
        "format": "{{msg.payload.reading|number:2}} kWh",
        "layout": "col-center",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "c5ee9704.6b2008",
        "type": "change",
        "z": "e1d714ec.ccad48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "data.node",
                "pt": "msg",
                "to": "NO94B97EC0C46C",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "offset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 445,
        "y": 280,
        "wires": [
            [
                "9555c92e.722488"
            ]
        ],
        "l": false
    },
    {
        "id": "10b42aae.3f5b75",
        "type": "ui_form",
        "z": "e1d714ec.ccad48",
        "name": "",
        "label": "Zählerstand Setzen",
        "group": "bf837bc6.2c47f8",
        "order": 13,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "68.23 (kWh)",
                "value": "set",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "set": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "c5ee9704.6b2008"
            ]
        ]
    },
    {
        "id": "af9e815c.9dce8",
        "type": "inject",
        "z": "e1d714ec.ccad48",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "NO94B97EC0C46C.json",
        "payloadType": "str",
        "x": 340,
        "y": 520,
        "wires": [
            [
                "bc75109e.4b5ab"
            ]
        ]
    },
    {
        "id": "26ceb507.f3ba0a",
        "type": "debug",
        "z": "e1d714ec.ccad48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 600,
        "wires": []
    },
    {
        "id": "bc75109e.4b5ab",
        "type": "exec",
        "z": "e1d714ec.ccad48",
        "command": "tail -5 /home/pi/LORIDANE/database/NO94B97EC0C46C/NO94B97EC0C46C_2021-09.json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 780,
        "y": 540,
        "wires": [
            [
                "26ceb507.f3ba0a"
            ],
            [],
            []
        ]
    },
    {
        "id": "9316dcde.92d3b",
        "type": "link in",
        "z": "e1d714ec.ccad48",
        "name": "Data Processing in",
        "links": [
            "dcee77a5.339a48"
        ],
        "x": 175,
        "y": 660,
        "wires": [
            [
                "3820b89b.c17848"
            ]
        ]
    },
    {
        "id": "3820b89b.c17848",
        "type": "function",
        "z": "e1d714ec.ccad48",
        "name": "Filter Nodes ONRO",
        "func": "nodes = [\n    \"NOF008D1C8DC20\",\n    /*\"NO:94:B9:7E:C0:C3:1C\"*/\n    ];\n\nif (nodes.indexOf(msg.data.node) == -1){\n    return;\n}\n\nif(msg.data.pay == \"+\")return;\n\nsavedatato = `LORIDANE.data.NOF008D1C8DC20`;\nnow = new Date().toLocaleString(\"de-DE\");\nglobal.set(savedatato,now);\nreturn {payload:now};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "d129b8d1.7f3258"
            ]
        ]
    },
    {
        "id": "d129b8d1.7f3258",
        "type": "debug",
        "z": "e1d714ec.ccad48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 660,
        "wires": []
    },
    {
        "id": "c5edeb1b.e0c6a8",
        "type": "switch",
        "z": "e1d714ec.ccad48",
        "name": "",
        "property": "data.node",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NO94B97EC0C46C",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "87c0777b.2a3268",
                "83f29945.7fa948"
            ]
        ]
    },
    {
        "id": "8af4cb01.be0b88",
        "type": "link in",
        "z": "e1d714ec.ccad48",
        "name": "Data Processing in",
        "links": [
            "dcee77a5.339a48"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "92174b3b.9e10f8"
            ]
        ]
    },
    {
        "id": "e5410fa4.8b429",
        "type": "function",
        "z": "e1d714ec.ccad48",
        "name": "analyse payload",
        "func": "if(msg.payload[0] == \"+\"){\n    return;\n}\n\nlet pay;\nlet payloadobject = {};\n\nif (msg.payload.includes(\";\")){\n    pay = msg.payload.split(\";\");    \n}else{\n    pay[0] = msg.payload;\n}\n\nlet i = 0;\nfor(var val of pay){\n    if(typeof(val) == \"number\"){\n        val = parseFloat(val);\n    }\n    payloadobject[`measure${i}`] = val;\n    i++;\n}\nmsg.payload = payloadobject;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 400,
        "wires": [
            [
                "11d81530.cba6ab"
            ]
        ]
    },
    {
        "id": "11d81530.cba6ab",
        "type": "function",
        "z": "e1d714ec.ccad48",
        "name": "Set DataSet",
        "func": "data = msg.data\nUID = data.node;\ntime = new Date(data.lastSeen)||new Date.now();\nshowtime = time.toLocaleString(\"de-DE\");\ndate = time.toISOString().substr(0,7);\nUSER = global.get(\"LORIDANE.LinuxUsername\")\n\nmsg.payload.time = showtime;\nmsg.payload.timestamp = time;\n\nif(msg.payload !== null)msg.filename = `/home/${USER}/LORIDANE/database/${UID}/${UID}_${date}.json`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "30afd728.c964c8"
            ]
        ]
    },
    {
        "id": "30afd728.c964c8",
        "type": "file",
        "z": "e1d714ec.ccad48",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 630,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "92174b3b.9e10f8",
        "type": "switch",
        "z": "e1d714ec.ccad48",
        "name": "",
        "property": "data.node",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "NO94B97EC0C46C",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "e5410fa4.8b429"
            ]
        ]
    },
    {
        "id": "13052165.21d61f",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "load file to obj array",
        "func": "fs = global.get(\"fs\");\npath = msg.filepath;\nfile = fs.readFileSync(path,'utf-8').split(\"\\n\");\nfile.splice(file.length - 1,1);\ndata = [];\nfile.forEach(element => data.push(JSON.parse(element)));\nkeys = Object.keys(data[0]);\n\nfor(var element in data){\n    for(var key of keys){\n        if (data[element][key] == null){\n            data.splice(element,1);\n            break;\n        }\n    }\n}\n\nmsg.data = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "9efe8a25.4f6838"
            ]
        ]
    },
    {
        "id": "ba00658b.c17b88",
        "type": "inject",
        "z": "4d335ad3.5561e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "77954d49.12a384"
            ]
        ]
    },
    {
        "id": "77954d49.12a384",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "define filepath",
        "func": "path = global.get(\"LORIDANE.settings.path.database\");\nnow = Date.now();\ntime = new Date(now);\ndate = time.toISOString().substr(0,7);\nUID = \"NO94B97EC0C46C\";\npath = path+ `${UID}/${UID}_${date}.json`;\n//node.warn(path)\nmsg.params = {\n    starttime: Date.now() - 24*60*60*1000,\n    interval: 24*60*60*1000,\n    costPerKwh: 0.283,\n};\n\n\nmsg.filepath = path;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 140,
        "wires": [
            [
                "13052165.21d61f"
            ]
        ]
    },
    {
        "id": "7056ee7e.97b6",
        "type": "debug",
        "z": "4d335ad3.5561e4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 140,
        "wires": []
    },
    {
        "id": "9efe8a25.4f6838",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "mean power by time",
        "func": "const interval = msg.params.interval;\nconst starttime = msg.params.starttime;\nconst endtime = starttime + interval;\nconst costPerKwh = msg.params.costPerKwh;\nlet data = msg.data;\nconst IRO = global.get(\"LORIDANE.funcs.inRangeOf\");\nlet powers = [];\nlet timespan = [];\nmsg.out = {};\n\nfor (i = 0; i<data.length;i++){\n    if(IRO(data[i].timestamp,starttime,endtime)){\n        timespan.push(data[i].timestamp);\n        powers.push(data[i].power);\n    }\n}\n\nspan = timespan[timespan.length-1] - timespan[0];\n\nfor (i = 1;i < powers.length;i++){\n    powers[i] *= (timespan[i] - timespan[i-1]);\n}\n\n//node.warn(powers)\npower = powers.reduce((left,right) => left + right);\npower /=  span;\n\n\nmsg.out.powers = powers;\nmsg.out.power  = power;\ncost = power/1000 * costPerKwh * span/36e5;\nmsg.out.costPerInterval = cost;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "7056ee7e.97b6"
            ]
        ]
    },
    {
        "id": "e5bc690b.da25f8",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "fun = global.get(\"LORIDANE.funcs.inRangeOf\");\nmsg.payload = String(fun);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "39cd842.5a01f7c"
            ]
        ]
    },
    {
        "id": "c68e6f8f.4962e",
        "type": "inject",
        "z": "4d335ad3.5561e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "e5bc690b.da25f8"
            ]
        ]
    },
    {
        "id": "39cd842.5a01f7c",
        "type": "debug",
        "z": "4d335ad3.5561e4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 380,
        "wires": []
    },
    {
        "id": "aa427b71.9de5e8",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "load file to obj array",
        "func": "fs = global.get(\"fs\");\npath = msg.filepath;\nfile = fs.readFileSync(path,'utf-8').split(\"\\n\");\nfile.splice(file.length - 1,1);\ndata = [];\nfile.forEach(element => data.push(JSON.parse(element)));\nkeys = Object.keys(data[0]);\n\nfor(var element in data){\n    for(var key of keys){\n        if (data[element][key] == null){\n            data.splice(element,1);\n            break;\n        }\n    }\n}\n\nmsg.data = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 560,
        "wires": [
            [
                "35783343.7a69ec"
            ]
        ]
    },
    {
        "id": "66ae4119.2f87a",
        "type": "inject",
        "z": "4d335ad3.5561e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "7799db77.737504"
            ]
        ]
    },
    {
        "id": "7799db77.737504",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "define filepath",
        "func": "//path = global.get(\"LORIDANE.settings.path.database\");\nnow = Date.now();\ntime = new Date(now);\ndate = time.toISOString().substr(0,10);\nUID = \"NO94B97EC0C46C\";\npath = `/home/pi/LORIDANE/database/NO94B97EC0C46C/NO94B97EC0C46C_2021-09.json`;\n//node.warn(path)\nmsg.params = {\n    starttime: 0,//Date.now() - 24*60*60*1000,\n    interval: Infinity,\n    costPerKwh: 0.283,\n};\n\n\nmsg.filepath = path;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 560,
        "wires": [
            [
                "aa427b71.9de5e8"
            ]
        ]
    },
    {
        "id": "4ad48aea.283e34",
        "type": "debug",
        "z": "4d335ad3.5561e4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 500,
        "wires": []
    },
    {
        "id": "2bd3a7af.9e5368",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "extract",
        "func": "data = msg.data;\nts = []\nrawdata = [];\nfor (var date of data){\n    rawdata.push(date.power);\n    ts.push(date.timestamp);\n} \nreturn {power:rawdata,ts:ts};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 460,
        "wires": [
            [
                "bdde307b.315e6"
            ]
        ]
    },
    {
        "id": "bdde307b.315e6",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "gradients",
        "func": "getMean = global.get(\"LORIDANE.funcs.math.getMean\");\ngetSmooth = global.get(\"LORIDANE.funcs.math.getSmooth\");\ngetCDS = global.get(\"LORIDANE.funcs.math.getCDS\");\ndata = msg.power\ndata = getSmooth(data,5)\nts = msg.ts;\ngradients = [0];\nfor(i = 1; i< data.length;i++){\n    gradients.push(data[i]-data[i-1]);\n}\nmsg.gradients = gradients;\n\nmsg.meangradient = getMean(gradients);\nmsg.smoothgradient = getSmooth(getSmooth(gradients,2),2);\nmsg.smoothdata = data;\nmsg.cds2 = getCDS(data,2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b07fd177.6dedb",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "plot",
        "func": "PL = global.get(\"plot\");\nx=msg.ts;\ny=msg.power;\nconst trace1 = [{x:x,y:y,type:\"line\"}];\nPL.plot(trace1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "35783343.7a69ec",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "data = msg.data\nstarttime = data[0].timestamp\nlet count = 1\nfor(var date of data){\n    delete date.reading\n    delete date.powerunit\n    delete date.readingunit\n    delete date.time\n    date.reltime = date.timestamp - starttime;\n    date.id = \"R\"+count;\n    count++;\n}\nmsg.data = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 560,
        "wires": [
            [
                "4c63b8e2.bb1518"
            ]
        ]
    },
    {
        "id": "4c63b8e2.bb1518",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "data = msg.data\niro = global.get(\"LORIDANE.funcs.inRangeOf\");\n\nfor(var i in data){\n    if(iro(data[i].power,0,47)){\n        data[i].pid = \"idle\"\n    }else if(iro(data[i].power,47,52.5)){\n        data[i].pid = \"downstream\"\n    }else if(iro(data[i].power,52.5,10)){\n        data[i].pid = \"upstream\"\n    }else if(iro(data[i].power,55,1000)){\n        data[i].pid = \"calculation\"\n    }\n}\nmsg.data = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 560,
        "wires": [
            [
                "32ed050d.faa9aa"
            ]
        ]
    },
    {
        "id": "32ed050d.faa9aa",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "data = msg.data\nlen = data.length\ndata[0].dur = 0;\nfor(i=1;i<len;i++){\n    data[i].dur = Math.round((data[i].reltime - data[i-1].reltime)/1e3);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 560,
        "wires": [
            [
                "a7d294b.e470a68",
                "b19f0995.ebbca8"
            ]
        ]
    },
    {
        "id": "a7d294b.e470a68",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "for (var date of msg.data){\n    node.send({payload:date})\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 640,
        "wires": [
            [
                "181a612e.2c09bf"
            ]
        ]
    },
    {
        "id": "181a612e.2c09bf",
        "type": "file",
        "z": "4d335ad3.5561e4",
        "name": "",
        "filename": "/home/pi/LORIDANE/outdata/fileserver_202109_processed.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1070,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d6d75b.270598",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "data = msg.data;\nlen = data.length\nfirstline = \"\";\n\nfunction getEdge(bar1,bar2){\n    let edgeweight = 0;\n    let interval = bar2.reltime - bar1.reltime\n    if(bar1.reltime == bar2.reltime)return 0;\n    if(Math.abs(interval > 600000))return 0;\n    //compare power\n        if(bar1.pid == bar2.pid){\n        edgeweight += 1;\n    }\n    if((bar1.pstart && bar2.pstart) ||(bar1.pstart === false && bar2.pstart === false)){\n        edgeweight += 2;\n    }\n    if(Math.abs(interval < 600000)){\n        edgeweight += interval/1e4;\n    }\n    return edgeweight;\n}\n\nfor(var date of data){\n    append = \";\"+date.id;\n    firstline += append\n}\nnode.send({payload:firstline});\n\nfor (i=0;i<len;i++){\n    output = \"\"\n    output += data[i].id\n    for(j=0;j<len;j++){\n       output += \";\"+getEdge(data[i],data[j]);\n    }\n    node.send({payload:output})\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 580,
        "wires": [
            [
                "86bc7aba.bfdda8"
            ]
        ]
    },
    {
        "id": "86bc7aba.bfdda8",
        "type": "file",
        "z": "4d335ad3.5561e4",
        "name": "",
        "filename": "/home/pi/LORIDANE/outdata/fileserver_202109_edges.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1540,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "b19f0995.ebbca8",
        "type": "function",
        "z": "4d335ad3.5561e4",
        "name": "",
        "func": "data = msg.data\nlen = data.length;\ndata[0].pstart = true;\n\nfor (i = 2; i<len; i++){\n    if (data[i].pid != data[i-1].pid){\n        data[i].pstart = true\n        data[i-1].pstart = false\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "c2d6d75b.270598",
                "4ad48aea.283e34"
            ]
        ]
    },
    {
        "id": "74934f3780837a8f",
        "type": "exec",
        "z": "1395c386.064e8c",
        "command": "pwd",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "c868a2a20ad0f13a"
            ],
            [],
            []
        ]
    },
    {
        "id": "c868a2a20ad0f13a",
        "type": "function",
        "z": "1395c386.064e8c",
        "name": "Extract Username",
        "func": "data = msg.payload;\n\ndata = data.split('/');\nlet user = data[data.length-1].replace('\\n','');\nglobal.set([\"LORIDANE.LinuxUsername\",\"LORIDANE.blockONstart\"],[user,true]);\nnode.status({text:\"Linux Username: \"+user});\nmsg.user = user;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [
                "a0be56ff.ac9d48"
            ]
        ]
    },
    {
        "id": "bd8993296d192541",
        "type": "exec",
        "z": "a4cddca9.8d353",
        "command": "pwd",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "bc8d138ae30eedc7"
            ],
            [],
            []
        ]
    },
    {
        "id": "bc8d138ae30eedc7",
        "type": "function",
        "z": "a4cddca9.8d353",
        "name": "Extract Username",
        "func": "data = msg.payload;\n\ndata = data.split('/');\nlet user = data[data.length-1];\nglobal.set([\"LORIDANE.LinuxUsername\",\"LORIDANE.blockONstart\"],[user,true]);\nnode.status({text:\"Linux Username: \"+user});\nmsg.user = user;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 240,
        "wires": [
            [
                "a1fa5930.a56fa8"
            ]
        ]
    },
    {
        "id": "eaa86e5576016325",
        "type": "inject",
        "z": "a4cddca9.8d353",
        "name": "Load Device Configs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "bd8993296d192541"
            ]
        ]
    },
    {
        "id": "058480b5f3106a0f",
        "type": "serial in",
        "z": "a4cddca9.8d353",
        "name": "Listen to device",
        "serial": "d726f7d4.e188a8",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "e43c4a98f8845f65",
                "44457db1a7ee2979",
                "a5e08b0852fdc4a5"
            ]
        ]
    },
    {
        "id": "90e6f5b4d8fc09de",
        "type": "serial out",
        "z": "a4cddca9.8d353",
        "name": "Write to device",
        "serial": "d726f7d4.e188a8",
        "x": 820,
        "y": 400,
        "wires": []
    },
    {
        "id": "e43c4a98f8845f65",
        "type": "function",
        "z": "a4cddca9.8d353",
        "name": "",
        "func": "trigger = msg.payload;\n//trigger.replace(/\\r\\n|\\r|\\n/g,\"\")\nmsg = {payload: trigger};\n\ncases = [\n    \"Please Enter Your WiFi-SSID\",\n    \"Please Enter Your WiFi-Password\",\n    \"Please Enter the Address Of Your MQTT Broker without the Port\",\n    \"Please Enter the Username Of Your MQTT Broker\",\n    \"Please Enter the Password for Your MQTT Broker\",\n    ]\n\nfor(var pat of cases){\n    if (trigger.includes(pat)){\n        return msg;\n    }else{\n        continue;  \n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "c5254889fef66a08",
                "e38687305688f438"
            ]
        ]
    },
    {
        "id": "c5254889fef66a08",
        "type": "ui_toast",
        "z": "a4cddca9.8d353",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Input Dialog Creds",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "90e6f5b4d8fc09de",
                "e38687305688f438"
            ]
        ]
    },
    {
        "id": "073fd772b8729cb0",
        "type": "ui_button",
        "z": "a4cddca9.8d353",
        "name": "",
        "group": "4073e498fd9f7db7",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "WiFi Credentials",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "wifi",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 660,
        "y": 360,
        "wires": [
            [
                "90e6f5b4d8fc09de"
            ]
        ]
    },
    {
        "id": "28a2bcb26b1888ee",
        "type": "ui_button",
        "z": "a4cddca9.8d353",
        "name": "",
        "group": "4073e498fd9f7db7",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "MQTT Credentials",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "mqtt",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 670,
        "y": 320,
        "wires": [
            [
                "90e6f5b4d8fc09de"
            ]
        ]
    },
    {
        "id": "44457db1a7ee2979",
        "type": "debug",
        "z": "a4cddca9.8d353",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "e38687305688f438",
        "type": "debug",
        "z": "a4cddca9.8d353",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 540,
        "wires": []
    },
    {
        "id": "a5e08b0852fdc4a5",
        "type": "function",
        "z": "a4cddca9.8d353",
        "name": "Confirmation",
        "func": "trigger = msg.payload;\n//trigger.replace(/\\r\\n|\\r|\\n/g,\"\")\n\nmsg = {payload: trigger, topic: \"Answer:\"};\nif(trigger.includes(\"Message arrived\"))return;\ncases = [\n    \", IP address:\",\n    \"Please Enter Your WiFi-Password\",\n    \"[WIFI] Connecting to\",\n    \"MQTT Credentials updated\",\n    \"Subscribing to topic:\",\n    \"lora/GW\"\n    ]\n\nfor(var pat of cases){\n    if (trigger.includes(pat)){\n        return msg;\n    }else{\n        continue;  \n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "709fd53ca51a9035"
            ]
        ]
    },
    {
        "id": "709fd53ca51a9035",
        "type": "ui_toast",
        "z": "a4cddca9.8d353",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 540,
        "wires": []
    }
]